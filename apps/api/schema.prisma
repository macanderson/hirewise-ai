// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator py {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  refreshTokens Token[]
  profiles      Profile[]
  jobs          Job[]
  candidates    Candidate[]
}

model Token {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Profile for user details
model Profile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String?
  company   String?
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Job posting
model Job {
  id          String      @id @default(uuid())
  title       String
  description String
  company     String
  location    String?
  salary      String?
  type        JobType     @default(FULL_TIME)
  status      JobStatus   @default(OPEN)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  candidates  Candidate[]
}

// Candidate model
model Candidate {
  id          String           @id @default(uuid())
  name        String
  email       String
  phone       String?
  resume      String?
  coverLetter String?
  status      CandidateStatus  @default(NEW)
  job         Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  interviews  Interview[]
  assessments Assessment[]
}

// Interview scheduling
model Interview {
  id          String          @id @default(uuid())
  candidate   Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String
  scheduledAt DateTime
  duration    Int             // in minutes
  type        InterviewType   @default(PHONE)
  notes       String?
  status      InterviewStatus @default(SCHEDULED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// Candidate assessment
model Assessment {
  id          String   @id @default(uuid())
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String
  score       Float?
  feedback    String?
  skills      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Enums
enum Role {
  USER
  ADMIN
  RECRUITER
  HIRING_MANAGER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum JobStatus {
  OPEN
  CLOSED
  DRAFT
  ARCHIVED
}

enum CandidateStatus {
  NEW
  REVIEWING
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
}

enum InterviewType {
  PHONE
  VIDEO
  IN_PERSON
  TECHNICAL
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}
