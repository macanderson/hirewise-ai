# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _CandidateStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.CandidateStatus']]


class _CandidateStatusListFilterHasInput(TypedDict):
    has: 'enums.CandidateStatus'


class _CandidateStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.CandidateStatus']


class _CandidateStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.CandidateStatus']


class _CandidateStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


CandidateStatusListFilter = Union[
    _CandidateStatusListFilterHasInput,
    _CandidateStatusListFilterEqualsInput,
    _CandidateStatusListFilterHasSomeInput,
    _CandidateStatusListFilterIsEmptyInput,
    _CandidateStatusListFilterHasEveryInput,
]


class _CandidateStatusListUpdateSet(TypedDict):
    set: List['enums.CandidateStatus']


class _CandidateStatusListUpdatePush(TypedDict):
    push: List['enums.CandidateStatus']


CandidateStatusListUpdate = Union[
    List['enums.CandidateStatus'],
    _CandidateStatusListUpdateSet,
    _CandidateStatusListUpdatePush,
]

class _InterviewStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.InterviewStatus']]


class _InterviewStatusListFilterHasInput(TypedDict):
    has: 'enums.InterviewStatus'


class _InterviewStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.InterviewStatus']


class _InterviewStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.InterviewStatus']


class _InterviewStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


InterviewStatusListFilter = Union[
    _InterviewStatusListFilterHasInput,
    _InterviewStatusListFilterEqualsInput,
    _InterviewStatusListFilterHasSomeInput,
    _InterviewStatusListFilterIsEmptyInput,
    _InterviewStatusListFilterHasEveryInput,
]


class _InterviewStatusListUpdateSet(TypedDict):
    set: List['enums.InterviewStatus']


class _InterviewStatusListUpdatePush(TypedDict):
    push: List['enums.InterviewStatus']


InterviewStatusListUpdate = Union[
    List['enums.InterviewStatus'],
    _InterviewStatusListUpdateSet,
    _InterviewStatusListUpdatePush,
]

class _InterviewTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.InterviewType']]


class _InterviewTypeListFilterHasInput(TypedDict):
    has: 'enums.InterviewType'


class _InterviewTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.InterviewType']


class _InterviewTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.InterviewType']


class _InterviewTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


InterviewTypeListFilter = Union[
    _InterviewTypeListFilterHasInput,
    _InterviewTypeListFilterEqualsInput,
    _InterviewTypeListFilterHasSomeInput,
    _InterviewTypeListFilterIsEmptyInput,
    _InterviewTypeListFilterHasEveryInput,
]


class _InterviewTypeListUpdateSet(TypedDict):
    set: List['enums.InterviewType']


class _InterviewTypeListUpdatePush(TypedDict):
    push: List['enums.InterviewType']


InterviewTypeListUpdate = Union[
    List['enums.InterviewType'],
    _InterviewTypeListUpdateSet,
    _InterviewTypeListUpdatePush,
]

class _JobStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.JobStatus']]


class _JobStatusListFilterHasInput(TypedDict):
    has: 'enums.JobStatus'


class _JobStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.JobStatus']


class _JobStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.JobStatus']


class _JobStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JobStatusListFilter = Union[
    _JobStatusListFilterHasInput,
    _JobStatusListFilterEqualsInput,
    _JobStatusListFilterHasSomeInput,
    _JobStatusListFilterIsEmptyInput,
    _JobStatusListFilterHasEveryInput,
]


class _JobStatusListUpdateSet(TypedDict):
    set: List['enums.JobStatus']


class _JobStatusListUpdatePush(TypedDict):
    push: List['enums.JobStatus']


JobStatusListUpdate = Union[
    List['enums.JobStatus'],
    _JobStatusListUpdateSet,
    _JobStatusListUpdatePush,
]

class _JobTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.JobType']]


class _JobTypeListFilterHasInput(TypedDict):
    has: 'enums.JobType'


class _JobTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.JobType']


class _JobTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.JobType']


class _JobTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JobTypeListFilter = Union[
    _JobTypeListFilterHasInput,
    _JobTypeListFilterEqualsInput,
    _JobTypeListFilterHasSomeInput,
    _JobTypeListFilterIsEmptyInput,
    _JobTypeListFilterHasEveryInput,
]


class _JobTypeListUpdateSet(TypedDict):
    set: List['enums.JobType']


class _JobTypeListUpdatePush(TypedDict):
    push: List['enums.JobType']


JobTypeListUpdate = Union[
    List['enums.JobType'],
    _JobTypeListUpdateSet,
    _JobTypeListUpdatePush,
]

class _RoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Role']]


class _RoleListFilterHasInput(TypedDict):
    has: 'enums.Role'


class _RoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Role']


class _RoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Role']


class _RoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RoleListFilter = Union[
    _RoleListFilterHasInput,
    _RoleListFilterEqualsInput,
    _RoleListFilterHasSomeInput,
    _RoleListFilterIsEmptyInput,
    _RoleListFilterHasEveryInput,
]


class _RoleListUpdateSet(TypedDict):
    set: List['enums.Role']


class _RoleListUpdatePush(TypedDict):
    push: List['enums.Role']


RoleListUpdate = Union[
    List['enums.Role'],
    _RoleListUpdateSet,
    _RoleListUpdatePush,
]


# Assessment types

class AssessmentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Assessment create method"""
    candidateId: _str
    score: Optional[_float]
    feedback: Optional[_str]
    skills: List[_str]
    createdAt: datetime.datetime
    Candidate: 'CandidateCreateNestedWithoutRelationsInput'


class AssessmentCreateInput(AssessmentOptionalCreateInput):
    """Required arguments to the Assessment create method"""
    id: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AssessmentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Assessment create method, without relations"""
    candidateId: _str
    score: Optional[_float]
    feedback: Optional[_str]
    skills: List[_str]
    createdAt: datetime.datetime


class AssessmentCreateWithoutRelationsInput(AssessmentOptionalCreateWithoutRelationsInput):
    """Required arguments to the Assessment create method, without relations"""
    id: _str
    updatedAt: datetime.datetime

class AssessmentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AssessmentCreateWithoutRelationsInput'
    where: 'AssessmentWhereUniqueInput'

class AssessmentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AssessmentCreateWithoutRelationsInput'
    connect: 'AssessmentWhereUniqueInput'
    connect_or_create: 'AssessmentConnectOrCreateWithoutRelationsInput'


class AssessmentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AssessmentCreateWithoutRelationsInput', List['AssessmentCreateWithoutRelationsInput']]
    connect: Union['AssessmentWhereUniqueInput', List['AssessmentWhereUniqueInput']]
    connect_or_create: Union['AssessmentConnectOrCreateWithoutRelationsInput', List['AssessmentConnectOrCreateWithoutRelationsInput']]

_AssessmentWhereUnique_id_Input = TypedDict(
    '_AssessmentWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

AssessmentWhereUniqueInput = _AssessmentWhereUnique_id_Input


class AssessmentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    score: Optional[Union[AtomicFloatInput, _float]]
    feedback: Optional[_str]
    skills: 'types.StringListUpdate'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Candidate: 'CandidateUpdateOneWithoutRelationsInput'


class AssessmentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    score: Optional[Union[AtomicFloatInput, _float]]
    feedback: Optional[_str]
    skills: 'types.StringListUpdate'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AssessmentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AssessmentCreateWithoutRelationsInput']
    connect: List['AssessmentWhereUniqueInput']
    connect_or_create: List['AssessmentConnectOrCreateWithoutRelationsInput']
    set: List['AssessmentWhereUniqueInput']
    disconnect: List['AssessmentWhereUniqueInput']
    delete: List['AssessmentWhereUniqueInput']

    # TODO
    # update: List['AssessmentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AssessmentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AssessmentScalarWhereInput']
    # upsert: List['AssessmentUpserteWithWhereUniqueWithoutRelationsInput']


class AssessmentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AssessmentCreateWithoutRelationsInput'
    connect: 'AssessmentWhereUniqueInput'
    connect_or_create: 'AssessmentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AssessmentUpdateInput'
    # upsert: 'AssessmentUpsertWithoutRelationsInput'


class AssessmentUpsertInput(TypedDict):
    create: 'AssessmentCreateInput'
    update: 'AssessmentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Assessment_id_OrderByInput = TypedDict(
    '_Assessment_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Assessment_candidateId_OrderByInput = TypedDict(
    '_Assessment_candidateId_OrderByInput',
    {
        'candidateId': 'SortOrder',
    },
    total=True
)

_Assessment_score_OrderByInput = TypedDict(
    '_Assessment_score_OrderByInput',
    {
        'score': 'SortOrder',
    },
    total=True
)

_Assessment_feedback_OrderByInput = TypedDict(
    '_Assessment_feedback_OrderByInput',
    {
        'feedback': 'SortOrder',
    },
    total=True
)

_Assessment_skills_OrderByInput = TypedDict(
    '_Assessment_skills_OrderByInput',
    {
        'skills': 'SortOrder',
    },
    total=True
)

_Assessment_createdAt_OrderByInput = TypedDict(
    '_Assessment_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Assessment_updatedAt_OrderByInput = TypedDict(
    '_Assessment_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Assessment_RelevanceInner = TypedDict(
    '_Assessment_RelevanceInner',
    {
        'fields': 'List[AssessmentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Assessment_RelevanceOrderByInput = TypedDict(
    '_Assessment_RelevanceOrderByInput',
    {
        '_relevance': '_Assessment_RelevanceInner',
    },
    total=True
)

AssessmentOrderByInput = Union[
    '_Assessment_id_OrderByInput',
    '_Assessment_candidateId_OrderByInput',
    '_Assessment_score_OrderByInput',
    '_Assessment_feedback_OrderByInput',
    '_Assessment_skills_OrderByInput',
    '_Assessment_createdAt_OrderByInput',
    '_Assessment_updatedAt_OrderByInput',
    '_Assessment_RelevanceOrderByInput',
]



# recursive Assessment types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AssessmentRelationFilter = TypedDict(
    'AssessmentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AssessmentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AssessmentInclude(TypedDict, total=False):
    """Assessment relational arguments"""
    Candidate: Union[bool, 'CandidateArgsFromAssessment']


    

class AssessmentIncludeFromAssessment(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'CandidateArgsFromAssessmentRecursive1']


class AssessmentIncludeFromAssessmentRecursive1(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'CandidateArgsFromAssessmentRecursive2']


class AssessmentIncludeFromAssessmentRecursive2(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'CandidateArgsFromAssessmentRecursive3']


class AssessmentIncludeFromAssessmentRecursive3(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'CandidateArgsFromAssessmentRecursive4']


class AssessmentIncludeFromAssessmentRecursive4(TypedDict, total=False):
    """Relational arguments for Assessment"""

    

class AssessmentArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class AssessmentArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class AssessmentArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class AssessmentArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class AssessmentArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    
    

class FindManyAssessmentArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class FindManyAssessmentArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class FindManyAssessmentArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class FindManyAssessmentArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class FindManyAssessmentArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    
    

class CandidateIncludeFromAssessment(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromAssessmentRecursive1']
    Job: Union[bool, 'JobArgsFromAssessmentRecursive1']
    User: Union[bool, 'UserArgsFromAssessmentRecursive1']
    Interview: Union[bool, 'FindManyInterviewArgsFromAssessmentRecursive1']


class CandidateIncludeFromAssessmentRecursive1(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromAssessmentRecursive2']
    Job: Union[bool, 'JobArgsFromAssessmentRecursive2']
    User: Union[bool, 'UserArgsFromAssessmentRecursive2']
    Interview: Union[bool, 'FindManyInterviewArgsFromAssessmentRecursive2']


class CandidateIncludeFromAssessmentRecursive2(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromAssessmentRecursive3']
    Job: Union[bool, 'JobArgsFromAssessmentRecursive3']
    User: Union[bool, 'UserArgsFromAssessmentRecursive3']
    Interview: Union[bool, 'FindManyInterviewArgsFromAssessmentRecursive3']


class CandidateIncludeFromAssessmentRecursive3(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromAssessmentRecursive4']
    Job: Union[bool, 'JobArgsFromAssessmentRecursive4']
    User: Union[bool, 'UserArgsFromAssessmentRecursive4']
    Interview: Union[bool, 'FindManyInterviewArgsFromAssessmentRecursive4']


class CandidateIncludeFromAssessmentRecursive4(TypedDict, total=False):
    """Relational arguments for Assessment"""

    

class CandidateArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'CandidateIncludeFromCandidateRecursive1'


class CandidateArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'CandidateIncludeFromCandidateRecursive2'


class CandidateArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'CandidateIncludeFromCandidateRecursive3'


class CandidateArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'CandidateIncludeFromCandidateRecursive4'


class CandidateArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    
    

class FindManyCandidateArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive1'


class FindManyCandidateArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive2'


class FindManyCandidateArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive3'


class FindManyCandidateArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive4'


class FindManyCandidateArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    
    

class InterviewIncludeFromAssessment(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'CandidateArgsFromAssessmentRecursive1']


class InterviewIncludeFromAssessmentRecursive1(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'CandidateArgsFromAssessmentRecursive2']


class InterviewIncludeFromAssessmentRecursive2(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'CandidateArgsFromAssessmentRecursive3']


class InterviewIncludeFromAssessmentRecursive3(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'CandidateArgsFromAssessmentRecursive4']


class InterviewIncludeFromAssessmentRecursive4(TypedDict, total=False):
    """Relational arguments for Assessment"""

    

class InterviewArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'InterviewIncludeFromInterviewRecursive1'


class InterviewArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'InterviewIncludeFromInterviewRecursive2'


class InterviewArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'InterviewIncludeFromInterviewRecursive3'


class InterviewArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'InterviewIncludeFromInterviewRecursive4'


class InterviewArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    
    

class FindManyInterviewArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive1'


class FindManyInterviewArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive2'


class FindManyInterviewArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive3'


class FindManyInterviewArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive4'


class FindManyInterviewArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    
    

class JobIncludeFromAssessment(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromAssessmentRecursive1']
    User: Union[bool, 'UserArgsFromAssessmentRecursive1']


class JobIncludeFromAssessmentRecursive1(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromAssessmentRecursive2']
    User: Union[bool, 'UserArgsFromAssessmentRecursive2']


class JobIncludeFromAssessmentRecursive2(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromAssessmentRecursive3']
    User: Union[bool, 'UserArgsFromAssessmentRecursive3']


class JobIncludeFromAssessmentRecursive3(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromAssessmentRecursive4']
    User: Union[bool, 'UserArgsFromAssessmentRecursive4']


class JobIncludeFromAssessmentRecursive4(TypedDict, total=False):
    """Relational arguments for Assessment"""

    

class JobArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    
    

class FindManyJobArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class ProfileIncludeFromAssessment(TypedDict, total=False):
    """Relational arguments for Assessment"""
    User: Union[bool, 'UserArgsFromAssessmentRecursive1']


class ProfileIncludeFromAssessmentRecursive1(TypedDict, total=False):
    """Relational arguments for Assessment"""
    User: Union[bool, 'UserArgsFromAssessmentRecursive2']


class ProfileIncludeFromAssessmentRecursive2(TypedDict, total=False):
    """Relational arguments for Assessment"""
    User: Union[bool, 'UserArgsFromAssessmentRecursive3']


class ProfileIncludeFromAssessmentRecursive3(TypedDict, total=False):
    """Relational arguments for Assessment"""
    User: Union[bool, 'UserArgsFromAssessmentRecursive4']


class ProfileIncludeFromAssessmentRecursive4(TypedDict, total=False):
    """Relational arguments for Assessment"""

    

class ProfileArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    
    

class FindManyProfileArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class TokenIncludeFromAssessment(TypedDict, total=False):
    """Relational arguments for Assessment"""
    User: Union[bool, 'UserArgsFromAssessmentRecursive1']


class TokenIncludeFromAssessmentRecursive1(TypedDict, total=False):
    """Relational arguments for Assessment"""
    User: Union[bool, 'UserArgsFromAssessmentRecursive2']


class TokenIncludeFromAssessmentRecursive2(TypedDict, total=False):
    """Relational arguments for Assessment"""
    User: Union[bool, 'UserArgsFromAssessmentRecursive3']


class TokenIncludeFromAssessmentRecursive3(TypedDict, total=False):
    """Relational arguments for Assessment"""
    User: Union[bool, 'UserArgsFromAssessmentRecursive4']


class TokenIncludeFromAssessmentRecursive4(TypedDict, total=False):
    """Relational arguments for Assessment"""

    

class TokenArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    
    

class FindManyTokenArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class UserIncludeFromAssessment(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromAssessmentRecursive1']
    Job: Union[bool, 'FindManyJobArgsFromAssessmentRecursive1']
    Profile: Union[bool, 'FindManyProfileArgsFromAssessmentRecursive1']
    Token: Union[bool, 'FindManyTokenArgsFromAssessmentRecursive1']


class UserIncludeFromAssessmentRecursive1(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromAssessmentRecursive2']
    Job: Union[bool, 'FindManyJobArgsFromAssessmentRecursive2']
    Profile: Union[bool, 'FindManyProfileArgsFromAssessmentRecursive2']
    Token: Union[bool, 'FindManyTokenArgsFromAssessmentRecursive2']


class UserIncludeFromAssessmentRecursive2(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromAssessmentRecursive3']
    Job: Union[bool, 'FindManyJobArgsFromAssessmentRecursive3']
    Profile: Union[bool, 'FindManyProfileArgsFromAssessmentRecursive3']
    Token: Union[bool, 'FindManyTokenArgsFromAssessmentRecursive3']


class UserIncludeFromAssessmentRecursive3(TypedDict, total=False):
    """Relational arguments for Assessment"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromAssessmentRecursive4']
    Job: Union[bool, 'FindManyJobArgsFromAssessmentRecursive4']
    Profile: Union[bool, 'FindManyProfileArgsFromAssessmentRecursive4']
    Token: Union[bool, 'FindManyTokenArgsFromAssessmentRecursive4']


class UserIncludeFromAssessmentRecursive4(TypedDict, total=False):
    """Relational arguments for Assessment"""

    

class UserArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    
    

class FindManyUserArgsFromAssessment(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAssessmentRecursive1(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAssessmentRecursive2(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAssessmentRecursive3(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAssessmentRecursive4(TypedDict, total=False):
    """Arguments for Assessment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyAssessmentArgs = FindManyAssessmentArgsFromAssessment
FindFirstAssessmentArgs = FindManyAssessmentArgsFromAssessment


    

class AssessmentWhereInput(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    score: Union[None, _float, 'types.FloatFilter']
    feedback: Union[None, _str, 'types.StringFilter']
    skills: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'

    # should be noted that AND and NOT should be Union['AssessmentWhereInputRecursive1', List['AssessmentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AssessmentWhereInputRecursive1']
    OR: List['AssessmentWhereInputRecursive1']
    NOT: List['AssessmentWhereInputRecursive1']


class AssessmentWhereInputRecursive1(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    score: Union[None, _float, 'types.FloatFilter']
    feedback: Union[None, _str, 'types.StringFilter']
    skills: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'

    # should be noted that AND and NOT should be Union['AssessmentWhereInputRecursive2', List['AssessmentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AssessmentWhereInputRecursive2']
    OR: List['AssessmentWhereInputRecursive2']
    NOT: List['AssessmentWhereInputRecursive2']


class AssessmentWhereInputRecursive2(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    score: Union[None, _float, 'types.FloatFilter']
    feedback: Union[None, _str, 'types.StringFilter']
    skills: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'

    # should be noted that AND and NOT should be Union['AssessmentWhereInputRecursive3', List['AssessmentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AssessmentWhereInputRecursive3']
    OR: List['AssessmentWhereInputRecursive3']
    NOT: List['AssessmentWhereInputRecursive3']


class AssessmentWhereInputRecursive3(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    score: Union[None, _float, 'types.FloatFilter']
    feedback: Union[None, _str, 'types.StringFilter']
    skills: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'

    # should be noted that AND and NOT should be Union['AssessmentWhereInputRecursive4', List['AssessmentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AssessmentWhereInputRecursive4']
    OR: List['AssessmentWhereInputRecursive4']
    NOT: List['AssessmentWhereInputRecursive4']


class AssessmentWhereInputRecursive4(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    score: Union[None, _float, 'types.FloatFilter']
    feedback: Union[None, _str, 'types.StringFilter']
    skills: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'



# aggregate Assessment types


    

class AssessmentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    score: Union[_float, 'types.FloatWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AssessmentScalarWhereWithAggregatesInputRecursive1']
    OR: List['AssessmentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AssessmentScalarWhereWithAggregatesInputRecursive1']


class AssessmentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    score: Union[_float, 'types.FloatWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AssessmentScalarWhereWithAggregatesInputRecursive2']
    OR: List['AssessmentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AssessmentScalarWhereWithAggregatesInputRecursive2']


class AssessmentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    score: Union[_float, 'types.FloatWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AssessmentScalarWhereWithAggregatesInputRecursive3']
    OR: List['AssessmentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AssessmentScalarWhereWithAggregatesInputRecursive3']


class AssessmentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    score: Union[_float, 'types.FloatWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AssessmentScalarWhereWithAggregatesInputRecursive4']
    OR: List['AssessmentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AssessmentScalarWhereWithAggregatesInputRecursive4']


class AssessmentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Assessment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    score: Union[_float, 'types.FloatWithAggregatesFilter']
    feedback: Union[_str, 'types.StringWithAggregatesFilter']
    skills: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AssessmentGroupByOutput(TypedDict, total=False):
    id: _str
    candidateId: _str
    score: _float
    feedback: _str
    skills: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'AssessmentSumAggregateOutput'
    _avg: 'AssessmentAvgAggregateOutput'
    _min: 'AssessmentMinAggregateOutput'
    _max: 'AssessmentMaxAggregateOutput'
    _count: 'AssessmentCountAggregateOutput'


class AssessmentAvgAggregateOutput(TypedDict, total=False):
    """Assessment output for aggregating averages"""
    score: float


class AssessmentSumAggregateOutput(TypedDict, total=False):
    """Assessment output for aggregating sums"""
    score: _float


class AssessmentScalarAggregateOutput(TypedDict, total=False):
    """Assessment output including scalar fields"""
    id: _str
    candidateId: _str
    score: _float
    feedback: _str
    skills: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


AssessmentMinAggregateOutput = AssessmentScalarAggregateOutput
AssessmentMaxAggregateOutput = AssessmentScalarAggregateOutput


class AssessmentMaxAggregateInput(TypedDict, total=False):
    """Assessment input for aggregating by max"""
    id: bool
    candidateId: bool
    score: bool
    feedback: bool
    skills: bool
    createdAt: bool
    updatedAt: bool


class AssessmentMinAggregateInput(TypedDict, total=False):
    """Assessment input for aggregating by min"""
    id: bool
    candidateId: bool
    score: bool
    feedback: bool
    skills: bool
    createdAt: bool
    updatedAt: bool


class AssessmentNumberAggregateInput(TypedDict, total=False):
    """Assessment input for aggregating numbers"""
    score: bool


AssessmentAvgAggregateInput = AssessmentNumberAggregateInput
AssessmentSumAggregateInput = AssessmentNumberAggregateInput


AssessmentCountAggregateInput = TypedDict(
    'AssessmentCountAggregateInput',
    {
        'id': bool,
        'candidateId': bool,
        'score': bool,
        'feedback': bool,
        'skills': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

AssessmentCountAggregateOutput = TypedDict(
    'AssessmentCountAggregateOutput',
    {
        'id': int,
        'candidateId': int,
        'score': int,
        'feedback': int,
        'skills': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


AssessmentKeys = Literal[
    'id',
    'candidateId',
    'score',
    'feedback',
    'skills',
    'createdAt',
    'updatedAt',
    'Candidate',
]
AssessmentScalarFieldKeys = Literal[
    'id',
    'candidateId',
    'score',
    'feedback',
    'skills',
    'createdAt',
    'updatedAt',
]
AssessmentScalarFieldKeysT = TypeVar('AssessmentScalarFieldKeysT', bound=AssessmentScalarFieldKeys)

AssessmentRelationalFieldKeys = Literal[
        'Candidate',
    ]

# Candidate types

class CandidateOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Candidate create method"""
    phone: Optional[_str]
    resume: Optional[_str]
    coverLetter: Optional[_str]
    status: 'enums.CandidateStatus'
    jobId: _str
    userId: _str
    createdAt: datetime.datetime
    Assessment: 'AssessmentCreateManyNestedWithoutRelationsInput'
    Job: 'JobCreateNestedWithoutRelationsInput'
    User: 'UserCreateNestedWithoutRelationsInput'
    Interview: 'InterviewCreateManyNestedWithoutRelationsInput'


class CandidateCreateInput(CandidateOptionalCreateInput):
    """Required arguments to the Candidate create method"""
    id: _str
    name: _str
    email: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CandidateOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Candidate create method, without relations"""
    phone: Optional[_str]
    resume: Optional[_str]
    coverLetter: Optional[_str]
    status: 'enums.CandidateStatus'
    jobId: _str
    userId: _str
    createdAt: datetime.datetime


class CandidateCreateWithoutRelationsInput(CandidateOptionalCreateWithoutRelationsInput):
    """Required arguments to the Candidate create method, without relations"""
    id: _str
    name: _str
    email: _str
    updatedAt: datetime.datetime

class CandidateConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CandidateCreateWithoutRelationsInput'
    where: 'CandidateWhereUniqueInput'

class CandidateCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CandidateCreateWithoutRelationsInput'
    connect: 'CandidateWhereUniqueInput'
    connect_or_create: 'CandidateConnectOrCreateWithoutRelationsInput'


class CandidateCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CandidateCreateWithoutRelationsInput', List['CandidateCreateWithoutRelationsInput']]
    connect: Union['CandidateWhereUniqueInput', List['CandidateWhereUniqueInput']]
    connect_or_create: Union['CandidateConnectOrCreateWithoutRelationsInput', List['CandidateConnectOrCreateWithoutRelationsInput']]

_CandidateWhereUnique_id_Input = TypedDict(
    '_CandidateWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

CandidateWhereUniqueInput = _CandidateWhereUnique_id_Input


class CandidateUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    email: _str
    phone: Optional[_str]
    resume: Optional[_str]
    coverLetter: Optional[_str]
    status: 'enums.CandidateStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Assessment: 'AssessmentUpdateManyWithoutRelationsInput'
    Job: 'JobUpdateOneWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'
    Interview: 'InterviewUpdateManyWithoutRelationsInput'


class CandidateUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    email: _str
    phone: Optional[_str]
    resume: Optional[_str]
    coverLetter: Optional[_str]
    status: 'enums.CandidateStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CandidateUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CandidateCreateWithoutRelationsInput']
    connect: List['CandidateWhereUniqueInput']
    connect_or_create: List['CandidateConnectOrCreateWithoutRelationsInput']
    set: List['CandidateWhereUniqueInput']
    disconnect: List['CandidateWhereUniqueInput']
    delete: List['CandidateWhereUniqueInput']

    # TODO
    # update: List['CandidateUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CandidateUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CandidateScalarWhereInput']
    # upsert: List['CandidateUpserteWithWhereUniqueWithoutRelationsInput']


class CandidateUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CandidateCreateWithoutRelationsInput'
    connect: 'CandidateWhereUniqueInput'
    connect_or_create: 'CandidateConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CandidateUpdateInput'
    # upsert: 'CandidateUpsertWithoutRelationsInput'


class CandidateUpsertInput(TypedDict):
    create: 'CandidateCreateInput'
    update: 'CandidateUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Candidate_id_OrderByInput = TypedDict(
    '_Candidate_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Candidate_name_OrderByInput = TypedDict(
    '_Candidate_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Candidate_email_OrderByInput = TypedDict(
    '_Candidate_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Candidate_phone_OrderByInput = TypedDict(
    '_Candidate_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Candidate_resume_OrderByInput = TypedDict(
    '_Candidate_resume_OrderByInput',
    {
        'resume': 'SortOrder',
    },
    total=True
)

_Candidate_coverLetter_OrderByInput = TypedDict(
    '_Candidate_coverLetter_OrderByInput',
    {
        'coverLetter': 'SortOrder',
    },
    total=True
)

_Candidate_status_OrderByInput = TypedDict(
    '_Candidate_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Candidate_jobId_OrderByInput = TypedDict(
    '_Candidate_jobId_OrderByInput',
    {
        'jobId': 'SortOrder',
    },
    total=True
)

_Candidate_userId_OrderByInput = TypedDict(
    '_Candidate_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Candidate_createdAt_OrderByInput = TypedDict(
    '_Candidate_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Candidate_updatedAt_OrderByInput = TypedDict(
    '_Candidate_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Candidate_RelevanceInner = TypedDict(
    '_Candidate_RelevanceInner',
    {
        'fields': 'List[CandidateScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Candidate_RelevanceOrderByInput = TypedDict(
    '_Candidate_RelevanceOrderByInput',
    {
        '_relevance': '_Candidate_RelevanceInner',
    },
    total=True
)

CandidateOrderByInput = Union[
    '_Candidate_id_OrderByInput',
    '_Candidate_name_OrderByInput',
    '_Candidate_email_OrderByInput',
    '_Candidate_phone_OrderByInput',
    '_Candidate_resume_OrderByInput',
    '_Candidate_coverLetter_OrderByInput',
    '_Candidate_status_OrderByInput',
    '_Candidate_jobId_OrderByInput',
    '_Candidate_userId_OrderByInput',
    '_Candidate_createdAt_OrderByInput',
    '_Candidate_updatedAt_OrderByInput',
    '_Candidate_RelevanceOrderByInput',
]



# recursive Candidate types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CandidateRelationFilter = TypedDict(
    'CandidateRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CandidateListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CandidateInclude(TypedDict, total=False):
    """Candidate relational arguments"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromCandidate']
    Job: Union[bool, 'JobArgsFromCandidate']
    User: Union[bool, 'UserArgsFromCandidate']
    Interview: Union[bool, 'FindManyInterviewArgsFromCandidate']


    

class AssessmentIncludeFromCandidate(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'CandidateArgsFromCandidateRecursive1']


class AssessmentIncludeFromCandidateRecursive1(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'CandidateArgsFromCandidateRecursive2']


class AssessmentIncludeFromCandidateRecursive2(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'CandidateArgsFromCandidateRecursive3']


class AssessmentIncludeFromCandidateRecursive3(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'CandidateArgsFromCandidateRecursive4']


class AssessmentIncludeFromCandidateRecursive4(TypedDict, total=False):
    """Relational arguments for Candidate"""

    

class AssessmentArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class AssessmentArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class AssessmentArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class AssessmentArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class AssessmentArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    
    

class FindManyAssessmentArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class FindManyAssessmentArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class FindManyAssessmentArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class FindManyAssessmentArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class FindManyAssessmentArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    
    

class CandidateIncludeFromCandidate(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromCandidateRecursive1']
    Job: Union[bool, 'JobArgsFromCandidateRecursive1']
    User: Union[bool, 'UserArgsFromCandidateRecursive1']
    Interview: Union[bool, 'FindManyInterviewArgsFromCandidateRecursive1']


class CandidateIncludeFromCandidateRecursive1(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromCandidateRecursive2']
    Job: Union[bool, 'JobArgsFromCandidateRecursive2']
    User: Union[bool, 'UserArgsFromCandidateRecursive2']
    Interview: Union[bool, 'FindManyInterviewArgsFromCandidateRecursive2']


class CandidateIncludeFromCandidateRecursive2(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromCandidateRecursive3']
    Job: Union[bool, 'JobArgsFromCandidateRecursive3']
    User: Union[bool, 'UserArgsFromCandidateRecursive3']
    Interview: Union[bool, 'FindManyInterviewArgsFromCandidateRecursive3']


class CandidateIncludeFromCandidateRecursive3(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromCandidateRecursive4']
    Job: Union[bool, 'JobArgsFromCandidateRecursive4']
    User: Union[bool, 'UserArgsFromCandidateRecursive4']
    Interview: Union[bool, 'FindManyInterviewArgsFromCandidateRecursive4']


class CandidateIncludeFromCandidateRecursive4(TypedDict, total=False):
    """Relational arguments for Candidate"""

    

class CandidateArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'CandidateIncludeFromCandidateRecursive1'


class CandidateArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'CandidateIncludeFromCandidateRecursive2'


class CandidateArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'CandidateIncludeFromCandidateRecursive3'


class CandidateArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'CandidateIncludeFromCandidateRecursive4'


class CandidateArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    
    

class FindManyCandidateArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive1'


class FindManyCandidateArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive2'


class FindManyCandidateArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive3'


class FindManyCandidateArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive4'


class FindManyCandidateArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    
    

class InterviewIncludeFromCandidate(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'CandidateArgsFromCandidateRecursive1']


class InterviewIncludeFromCandidateRecursive1(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'CandidateArgsFromCandidateRecursive2']


class InterviewIncludeFromCandidateRecursive2(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'CandidateArgsFromCandidateRecursive3']


class InterviewIncludeFromCandidateRecursive3(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'CandidateArgsFromCandidateRecursive4']


class InterviewIncludeFromCandidateRecursive4(TypedDict, total=False):
    """Relational arguments for Candidate"""

    

class InterviewArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'InterviewIncludeFromInterviewRecursive1'


class InterviewArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'InterviewIncludeFromInterviewRecursive2'


class InterviewArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'InterviewIncludeFromInterviewRecursive3'


class InterviewArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'InterviewIncludeFromInterviewRecursive4'


class InterviewArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    
    

class FindManyInterviewArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive1'


class FindManyInterviewArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive2'


class FindManyInterviewArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive3'


class FindManyInterviewArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive4'


class FindManyInterviewArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    
    

class JobIncludeFromCandidate(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromCandidateRecursive1']
    User: Union[bool, 'UserArgsFromCandidateRecursive1']


class JobIncludeFromCandidateRecursive1(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromCandidateRecursive2']
    User: Union[bool, 'UserArgsFromCandidateRecursive2']


class JobIncludeFromCandidateRecursive2(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromCandidateRecursive3']
    User: Union[bool, 'UserArgsFromCandidateRecursive3']


class JobIncludeFromCandidateRecursive3(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromCandidateRecursive4']
    User: Union[bool, 'UserArgsFromCandidateRecursive4']


class JobIncludeFromCandidateRecursive4(TypedDict, total=False):
    """Relational arguments for Candidate"""

    

class JobArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    
    

class FindManyJobArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class ProfileIncludeFromCandidate(TypedDict, total=False):
    """Relational arguments for Candidate"""
    User: Union[bool, 'UserArgsFromCandidateRecursive1']


class ProfileIncludeFromCandidateRecursive1(TypedDict, total=False):
    """Relational arguments for Candidate"""
    User: Union[bool, 'UserArgsFromCandidateRecursive2']


class ProfileIncludeFromCandidateRecursive2(TypedDict, total=False):
    """Relational arguments for Candidate"""
    User: Union[bool, 'UserArgsFromCandidateRecursive3']


class ProfileIncludeFromCandidateRecursive3(TypedDict, total=False):
    """Relational arguments for Candidate"""
    User: Union[bool, 'UserArgsFromCandidateRecursive4']


class ProfileIncludeFromCandidateRecursive4(TypedDict, total=False):
    """Relational arguments for Candidate"""

    

class ProfileArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    
    

class FindManyProfileArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class TokenIncludeFromCandidate(TypedDict, total=False):
    """Relational arguments for Candidate"""
    User: Union[bool, 'UserArgsFromCandidateRecursive1']


class TokenIncludeFromCandidateRecursive1(TypedDict, total=False):
    """Relational arguments for Candidate"""
    User: Union[bool, 'UserArgsFromCandidateRecursive2']


class TokenIncludeFromCandidateRecursive2(TypedDict, total=False):
    """Relational arguments for Candidate"""
    User: Union[bool, 'UserArgsFromCandidateRecursive3']


class TokenIncludeFromCandidateRecursive3(TypedDict, total=False):
    """Relational arguments for Candidate"""
    User: Union[bool, 'UserArgsFromCandidateRecursive4']


class TokenIncludeFromCandidateRecursive4(TypedDict, total=False):
    """Relational arguments for Candidate"""

    

class TokenArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    
    

class FindManyTokenArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class UserIncludeFromCandidate(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromCandidateRecursive1']
    Job: Union[bool, 'FindManyJobArgsFromCandidateRecursive1']
    Profile: Union[bool, 'FindManyProfileArgsFromCandidateRecursive1']
    Token: Union[bool, 'FindManyTokenArgsFromCandidateRecursive1']


class UserIncludeFromCandidateRecursive1(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromCandidateRecursive2']
    Job: Union[bool, 'FindManyJobArgsFromCandidateRecursive2']
    Profile: Union[bool, 'FindManyProfileArgsFromCandidateRecursive2']
    Token: Union[bool, 'FindManyTokenArgsFromCandidateRecursive2']


class UserIncludeFromCandidateRecursive2(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromCandidateRecursive3']
    Job: Union[bool, 'FindManyJobArgsFromCandidateRecursive3']
    Profile: Union[bool, 'FindManyProfileArgsFromCandidateRecursive3']
    Token: Union[bool, 'FindManyTokenArgsFromCandidateRecursive3']


class UserIncludeFromCandidateRecursive3(TypedDict, total=False):
    """Relational arguments for Candidate"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromCandidateRecursive4']
    Job: Union[bool, 'FindManyJobArgsFromCandidateRecursive4']
    Profile: Union[bool, 'FindManyProfileArgsFromCandidateRecursive4']
    Token: Union[bool, 'FindManyTokenArgsFromCandidateRecursive4']


class UserIncludeFromCandidateRecursive4(TypedDict, total=False):
    """Relational arguments for Candidate"""

    

class UserArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    
    

class FindManyUserArgsFromCandidate(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCandidateRecursive1(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCandidateRecursive2(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCandidateRecursive3(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCandidateRecursive4(TypedDict, total=False):
    """Arguments for Candidate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyCandidateArgs = FindManyCandidateArgsFromCandidate
FindFirstCandidateArgs = FindManyCandidateArgsFromCandidate


    

class CandidateWhereInput(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']
    coverLetter: Union[None, _str, 'types.StringFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Assessment: 'AssessmentListRelationFilter'
    Job: 'JobRelationFilter'
    User: 'UserRelationFilter'
    Interview: 'InterviewListRelationFilter'

    # should be noted that AND and NOT should be Union['CandidateWhereInputRecursive1', List['CandidateWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CandidateWhereInputRecursive1']
    OR: List['CandidateWhereInputRecursive1']
    NOT: List['CandidateWhereInputRecursive1']


class CandidateWhereInputRecursive1(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']
    coverLetter: Union[None, _str, 'types.StringFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Assessment: 'AssessmentListRelationFilter'
    Job: 'JobRelationFilter'
    User: 'UserRelationFilter'
    Interview: 'InterviewListRelationFilter'

    # should be noted that AND and NOT should be Union['CandidateWhereInputRecursive2', List['CandidateWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CandidateWhereInputRecursive2']
    OR: List['CandidateWhereInputRecursive2']
    NOT: List['CandidateWhereInputRecursive2']


class CandidateWhereInputRecursive2(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']
    coverLetter: Union[None, _str, 'types.StringFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Assessment: 'AssessmentListRelationFilter'
    Job: 'JobRelationFilter'
    User: 'UserRelationFilter'
    Interview: 'InterviewListRelationFilter'

    # should be noted that AND and NOT should be Union['CandidateWhereInputRecursive3', List['CandidateWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CandidateWhereInputRecursive3']
    OR: List['CandidateWhereInputRecursive3']
    NOT: List['CandidateWhereInputRecursive3']


class CandidateWhereInputRecursive3(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']
    coverLetter: Union[None, _str, 'types.StringFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Assessment: 'AssessmentListRelationFilter'
    Job: 'JobRelationFilter'
    User: 'UserRelationFilter'
    Interview: 'InterviewListRelationFilter'

    # should be noted that AND and NOT should be Union['CandidateWhereInputRecursive4', List['CandidateWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CandidateWhereInputRecursive4']
    OR: List['CandidateWhereInputRecursive4']
    NOT: List['CandidateWhereInputRecursive4']


class CandidateWhereInputRecursive4(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']
    coverLetter: Union[None, _str, 'types.StringFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Assessment: 'AssessmentListRelationFilter'
    Job: 'JobRelationFilter'
    User: 'UserRelationFilter'
    Interview: 'InterviewListRelationFilter'



# aggregate Candidate types


    

class CandidateScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']
    coverLetter: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CandidateScalarWhereWithAggregatesInputRecursive1']
    OR: List['CandidateScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CandidateScalarWhereWithAggregatesInputRecursive1']


class CandidateScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']
    coverLetter: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CandidateScalarWhereWithAggregatesInputRecursive2']
    OR: List['CandidateScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CandidateScalarWhereWithAggregatesInputRecursive2']


class CandidateScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']
    coverLetter: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CandidateScalarWhereWithAggregatesInputRecursive3']
    OR: List['CandidateScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CandidateScalarWhereWithAggregatesInputRecursive3']


class CandidateScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']
    coverLetter: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CandidateScalarWhereWithAggregatesInputRecursive4']
    OR: List['CandidateScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CandidateScalarWhereWithAggregatesInputRecursive4']


class CandidateScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Candidate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']
    coverLetter: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.CandidateStatus'
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class CandidateGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    email: _str
    phone: _str
    resume: _str
    coverLetter: _str
    status: 'enums.CandidateStatus'
    jobId: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'CandidateSumAggregateOutput'
    _avg: 'CandidateAvgAggregateOutput'
    _min: 'CandidateMinAggregateOutput'
    _max: 'CandidateMaxAggregateOutput'
    _count: 'CandidateCountAggregateOutput'


class CandidateAvgAggregateOutput(TypedDict, total=False):
    """Candidate output for aggregating averages"""


class CandidateSumAggregateOutput(TypedDict, total=False):
    """Candidate output for aggregating sums"""


class CandidateScalarAggregateOutput(TypedDict, total=False):
    """Candidate output including scalar fields"""
    id: _str
    name: _str
    email: _str
    phone: _str
    resume: _str
    coverLetter: _str
    status: 'enums.CandidateStatus'
    jobId: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


CandidateMinAggregateOutput = CandidateScalarAggregateOutput
CandidateMaxAggregateOutput = CandidateScalarAggregateOutput


class CandidateMaxAggregateInput(TypedDict, total=False):
    """Candidate input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    phone: bool
    resume: bool
    coverLetter: bool
    status: bool
    jobId: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class CandidateMinAggregateInput(TypedDict, total=False):
    """Candidate input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    phone: bool
    resume: bool
    coverLetter: bool
    status: bool
    jobId: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class CandidateNumberAggregateInput(TypedDict, total=False):
    """Candidate input for aggregating numbers"""


CandidateAvgAggregateInput = CandidateNumberAggregateInput
CandidateSumAggregateInput = CandidateNumberAggregateInput


CandidateCountAggregateInput = TypedDict(
    'CandidateCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'phone': bool,
        'resume': bool,
        'coverLetter': bool,
        'status': bool,
        'jobId': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

CandidateCountAggregateOutput = TypedDict(
    'CandidateCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'phone': int,
        'resume': int,
        'coverLetter': int,
        'status': int,
        'jobId': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


CandidateKeys = Literal[
    'id',
    'name',
    'email',
    'phone',
    'resume',
    'coverLetter',
    'status',
    'jobId',
    'userId',
    'createdAt',
    'updatedAt',
    'Assessment',
    'Job',
    'User',
    'Interview',
]
CandidateScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'phone',
    'resume',
    'coverLetter',
    'status',
    'jobId',
    'userId',
    'createdAt',
    'updatedAt',
]
CandidateScalarFieldKeysT = TypeVar('CandidateScalarFieldKeysT', bound=CandidateScalarFieldKeys)

CandidateRelationalFieldKeys = Literal[
        'Assessment',
        'Job',
        'User',
        'Interview',
    ]

# Interview types

class InterviewOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Interview create method"""
    candidateId: _str
    type: 'enums.InterviewType'
    notes: Optional[_str]
    status: 'enums.InterviewStatus'
    createdAt: datetime.datetime
    Candidate: 'CandidateCreateNestedWithoutRelationsInput'


class InterviewCreateInput(InterviewOptionalCreateInput):
    """Required arguments to the Interview create method"""
    id: _str
    scheduledAt: datetime.datetime
    duration: _int
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class InterviewOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Interview create method, without relations"""
    candidateId: _str
    type: 'enums.InterviewType'
    notes: Optional[_str]
    status: 'enums.InterviewStatus'
    createdAt: datetime.datetime


class InterviewCreateWithoutRelationsInput(InterviewOptionalCreateWithoutRelationsInput):
    """Required arguments to the Interview create method, without relations"""
    id: _str
    scheduledAt: datetime.datetime
    duration: _int
    updatedAt: datetime.datetime

class InterviewConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'InterviewCreateWithoutRelationsInput'
    where: 'InterviewWhereUniqueInput'

class InterviewCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'InterviewCreateWithoutRelationsInput'
    connect: 'InterviewWhereUniqueInput'
    connect_or_create: 'InterviewConnectOrCreateWithoutRelationsInput'


class InterviewCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['InterviewCreateWithoutRelationsInput', List['InterviewCreateWithoutRelationsInput']]
    connect: Union['InterviewWhereUniqueInput', List['InterviewWhereUniqueInput']]
    connect_or_create: Union['InterviewConnectOrCreateWithoutRelationsInput', List['InterviewConnectOrCreateWithoutRelationsInput']]

_InterviewWhereUnique_id_Input = TypedDict(
    '_InterviewWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

InterviewWhereUniqueInput = _InterviewWhereUnique_id_Input


class InterviewUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    scheduledAt: datetime.datetime
    duration: Union[AtomicIntInput, _int]
    type: 'enums.InterviewType'
    notes: Optional[_str]
    status: 'enums.InterviewStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Candidate: 'CandidateUpdateOneWithoutRelationsInput'


class InterviewUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    scheduledAt: datetime.datetime
    duration: Union[AtomicIntInput, _int]
    type: 'enums.InterviewType'
    notes: Optional[_str]
    status: 'enums.InterviewStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class InterviewUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['InterviewCreateWithoutRelationsInput']
    connect: List['InterviewWhereUniqueInput']
    connect_or_create: List['InterviewConnectOrCreateWithoutRelationsInput']
    set: List['InterviewWhereUniqueInput']
    disconnect: List['InterviewWhereUniqueInput']
    delete: List['InterviewWhereUniqueInput']

    # TODO
    # update: List['InterviewUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['InterviewUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['InterviewScalarWhereInput']
    # upsert: List['InterviewUpserteWithWhereUniqueWithoutRelationsInput']


class InterviewUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'InterviewCreateWithoutRelationsInput'
    connect: 'InterviewWhereUniqueInput'
    connect_or_create: 'InterviewConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'InterviewUpdateInput'
    # upsert: 'InterviewUpsertWithoutRelationsInput'


class InterviewUpsertInput(TypedDict):
    create: 'InterviewCreateInput'
    update: 'InterviewUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Interview_id_OrderByInput = TypedDict(
    '_Interview_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Interview_candidateId_OrderByInput = TypedDict(
    '_Interview_candidateId_OrderByInput',
    {
        'candidateId': 'SortOrder',
    },
    total=True
)

_Interview_scheduledAt_OrderByInput = TypedDict(
    '_Interview_scheduledAt_OrderByInput',
    {
        'scheduledAt': 'SortOrder',
    },
    total=True
)

_Interview_duration_OrderByInput = TypedDict(
    '_Interview_duration_OrderByInput',
    {
        'duration': 'SortOrder',
    },
    total=True
)

_Interview_type_OrderByInput = TypedDict(
    '_Interview_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Interview_notes_OrderByInput = TypedDict(
    '_Interview_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_Interview_status_OrderByInput = TypedDict(
    '_Interview_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Interview_createdAt_OrderByInput = TypedDict(
    '_Interview_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Interview_updatedAt_OrderByInput = TypedDict(
    '_Interview_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Interview_RelevanceInner = TypedDict(
    '_Interview_RelevanceInner',
    {
        'fields': 'List[InterviewScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Interview_RelevanceOrderByInput = TypedDict(
    '_Interview_RelevanceOrderByInput',
    {
        '_relevance': '_Interview_RelevanceInner',
    },
    total=True
)

InterviewOrderByInput = Union[
    '_Interview_id_OrderByInput',
    '_Interview_candidateId_OrderByInput',
    '_Interview_scheduledAt_OrderByInput',
    '_Interview_duration_OrderByInput',
    '_Interview_type_OrderByInput',
    '_Interview_notes_OrderByInput',
    '_Interview_status_OrderByInput',
    '_Interview_createdAt_OrderByInput',
    '_Interview_updatedAt_OrderByInput',
    '_Interview_RelevanceOrderByInput',
]



# recursive Interview types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

InterviewRelationFilter = TypedDict(
    'InterviewRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class InterviewListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class InterviewInclude(TypedDict, total=False):
    """Interview relational arguments"""
    Candidate: Union[bool, 'CandidateArgsFromInterview']


    

class AssessmentIncludeFromInterview(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'CandidateArgsFromInterviewRecursive1']


class AssessmentIncludeFromInterviewRecursive1(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'CandidateArgsFromInterviewRecursive2']


class AssessmentIncludeFromInterviewRecursive2(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'CandidateArgsFromInterviewRecursive3']


class AssessmentIncludeFromInterviewRecursive3(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'CandidateArgsFromInterviewRecursive4']


class AssessmentIncludeFromInterviewRecursive4(TypedDict, total=False):
    """Relational arguments for Interview"""

    

class AssessmentArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class AssessmentArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class AssessmentArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class AssessmentArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class AssessmentArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    
    

class FindManyAssessmentArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class FindManyAssessmentArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class FindManyAssessmentArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class FindManyAssessmentArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class FindManyAssessmentArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    
    

class CandidateIncludeFromInterview(TypedDict, total=False):
    """Relational arguments for Interview"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromInterviewRecursive1']
    Job: Union[bool, 'JobArgsFromInterviewRecursive1']
    User: Union[bool, 'UserArgsFromInterviewRecursive1']
    Interview: Union[bool, 'FindManyInterviewArgsFromInterviewRecursive1']


class CandidateIncludeFromInterviewRecursive1(TypedDict, total=False):
    """Relational arguments for Interview"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromInterviewRecursive2']
    Job: Union[bool, 'JobArgsFromInterviewRecursive2']
    User: Union[bool, 'UserArgsFromInterviewRecursive2']
    Interview: Union[bool, 'FindManyInterviewArgsFromInterviewRecursive2']


class CandidateIncludeFromInterviewRecursive2(TypedDict, total=False):
    """Relational arguments for Interview"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromInterviewRecursive3']
    Job: Union[bool, 'JobArgsFromInterviewRecursive3']
    User: Union[bool, 'UserArgsFromInterviewRecursive3']
    Interview: Union[bool, 'FindManyInterviewArgsFromInterviewRecursive3']


class CandidateIncludeFromInterviewRecursive3(TypedDict, total=False):
    """Relational arguments for Interview"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromInterviewRecursive4']
    Job: Union[bool, 'JobArgsFromInterviewRecursive4']
    User: Union[bool, 'UserArgsFromInterviewRecursive4']
    Interview: Union[bool, 'FindManyInterviewArgsFromInterviewRecursive4']


class CandidateIncludeFromInterviewRecursive4(TypedDict, total=False):
    """Relational arguments for Interview"""

    

class CandidateArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'CandidateIncludeFromCandidateRecursive1'


class CandidateArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'CandidateIncludeFromCandidateRecursive2'


class CandidateArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'CandidateIncludeFromCandidateRecursive3'


class CandidateArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'CandidateIncludeFromCandidateRecursive4'


class CandidateArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    
    

class FindManyCandidateArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive1'


class FindManyCandidateArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive2'


class FindManyCandidateArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive3'


class FindManyCandidateArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive4'


class FindManyCandidateArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    
    

class InterviewIncludeFromInterview(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'CandidateArgsFromInterviewRecursive1']


class InterviewIncludeFromInterviewRecursive1(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'CandidateArgsFromInterviewRecursive2']


class InterviewIncludeFromInterviewRecursive2(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'CandidateArgsFromInterviewRecursive3']


class InterviewIncludeFromInterviewRecursive3(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'CandidateArgsFromInterviewRecursive4']


class InterviewIncludeFromInterviewRecursive4(TypedDict, total=False):
    """Relational arguments for Interview"""

    

class InterviewArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'InterviewIncludeFromInterviewRecursive1'


class InterviewArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'InterviewIncludeFromInterviewRecursive2'


class InterviewArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'InterviewIncludeFromInterviewRecursive3'


class InterviewArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'InterviewIncludeFromInterviewRecursive4'


class InterviewArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    
    

class FindManyInterviewArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive1'


class FindManyInterviewArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive2'


class FindManyInterviewArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive3'


class FindManyInterviewArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive4'


class FindManyInterviewArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    
    

class JobIncludeFromInterview(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromInterviewRecursive1']
    User: Union[bool, 'UserArgsFromInterviewRecursive1']


class JobIncludeFromInterviewRecursive1(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromInterviewRecursive2']
    User: Union[bool, 'UserArgsFromInterviewRecursive2']


class JobIncludeFromInterviewRecursive2(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromInterviewRecursive3']
    User: Union[bool, 'UserArgsFromInterviewRecursive3']


class JobIncludeFromInterviewRecursive3(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromInterviewRecursive4']
    User: Union[bool, 'UserArgsFromInterviewRecursive4']


class JobIncludeFromInterviewRecursive4(TypedDict, total=False):
    """Relational arguments for Interview"""

    

class JobArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    
    

class FindManyJobArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class ProfileIncludeFromInterview(TypedDict, total=False):
    """Relational arguments for Interview"""
    User: Union[bool, 'UserArgsFromInterviewRecursive1']


class ProfileIncludeFromInterviewRecursive1(TypedDict, total=False):
    """Relational arguments for Interview"""
    User: Union[bool, 'UserArgsFromInterviewRecursive2']


class ProfileIncludeFromInterviewRecursive2(TypedDict, total=False):
    """Relational arguments for Interview"""
    User: Union[bool, 'UserArgsFromInterviewRecursive3']


class ProfileIncludeFromInterviewRecursive3(TypedDict, total=False):
    """Relational arguments for Interview"""
    User: Union[bool, 'UserArgsFromInterviewRecursive4']


class ProfileIncludeFromInterviewRecursive4(TypedDict, total=False):
    """Relational arguments for Interview"""

    

class ProfileArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    
    

class FindManyProfileArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class TokenIncludeFromInterview(TypedDict, total=False):
    """Relational arguments for Interview"""
    User: Union[bool, 'UserArgsFromInterviewRecursive1']


class TokenIncludeFromInterviewRecursive1(TypedDict, total=False):
    """Relational arguments for Interview"""
    User: Union[bool, 'UserArgsFromInterviewRecursive2']


class TokenIncludeFromInterviewRecursive2(TypedDict, total=False):
    """Relational arguments for Interview"""
    User: Union[bool, 'UserArgsFromInterviewRecursive3']


class TokenIncludeFromInterviewRecursive3(TypedDict, total=False):
    """Relational arguments for Interview"""
    User: Union[bool, 'UserArgsFromInterviewRecursive4']


class TokenIncludeFromInterviewRecursive4(TypedDict, total=False):
    """Relational arguments for Interview"""

    

class TokenArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    
    

class FindManyTokenArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class UserIncludeFromInterview(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromInterviewRecursive1']
    Job: Union[bool, 'FindManyJobArgsFromInterviewRecursive1']
    Profile: Union[bool, 'FindManyProfileArgsFromInterviewRecursive1']
    Token: Union[bool, 'FindManyTokenArgsFromInterviewRecursive1']


class UserIncludeFromInterviewRecursive1(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromInterviewRecursive2']
    Job: Union[bool, 'FindManyJobArgsFromInterviewRecursive2']
    Profile: Union[bool, 'FindManyProfileArgsFromInterviewRecursive2']
    Token: Union[bool, 'FindManyTokenArgsFromInterviewRecursive2']


class UserIncludeFromInterviewRecursive2(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromInterviewRecursive3']
    Job: Union[bool, 'FindManyJobArgsFromInterviewRecursive3']
    Profile: Union[bool, 'FindManyProfileArgsFromInterviewRecursive3']
    Token: Union[bool, 'FindManyTokenArgsFromInterviewRecursive3']


class UserIncludeFromInterviewRecursive3(TypedDict, total=False):
    """Relational arguments for Interview"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromInterviewRecursive4']
    Job: Union[bool, 'FindManyJobArgsFromInterviewRecursive4']
    Profile: Union[bool, 'FindManyProfileArgsFromInterviewRecursive4']
    Token: Union[bool, 'FindManyTokenArgsFromInterviewRecursive4']


class UserIncludeFromInterviewRecursive4(TypedDict, total=False):
    """Relational arguments for Interview"""

    

class UserArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    
    

class FindManyUserArgsFromInterview(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromInterviewRecursive1(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromInterviewRecursive2(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromInterviewRecursive3(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromInterviewRecursive4(TypedDict, total=False):
    """Arguments for Interview"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyInterviewArgs = FindManyInterviewArgsFromInterview
FindFirstInterviewArgs = FindManyInterviewArgsFromInterview


    

class InterviewWhereInput(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeFilter']
    duration: Union[_int, 'types.IntFilter']
    type: 'enums.InterviewType'
    notes: Union[None, _str, 'types.StringFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'

    # should be noted that AND and NOT should be Union['InterviewWhereInputRecursive1', List['InterviewWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['InterviewWhereInputRecursive1']
    OR: List['InterviewWhereInputRecursive1']
    NOT: List['InterviewWhereInputRecursive1']


class InterviewWhereInputRecursive1(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeFilter']
    duration: Union[_int, 'types.IntFilter']
    type: 'enums.InterviewType'
    notes: Union[None, _str, 'types.StringFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'

    # should be noted that AND and NOT should be Union['InterviewWhereInputRecursive2', List['InterviewWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['InterviewWhereInputRecursive2']
    OR: List['InterviewWhereInputRecursive2']
    NOT: List['InterviewWhereInputRecursive2']


class InterviewWhereInputRecursive2(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeFilter']
    duration: Union[_int, 'types.IntFilter']
    type: 'enums.InterviewType'
    notes: Union[None, _str, 'types.StringFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'

    # should be noted that AND and NOT should be Union['InterviewWhereInputRecursive3', List['InterviewWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['InterviewWhereInputRecursive3']
    OR: List['InterviewWhereInputRecursive3']
    NOT: List['InterviewWhereInputRecursive3']


class InterviewWhereInputRecursive3(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeFilter']
    duration: Union[_int, 'types.IntFilter']
    type: 'enums.InterviewType'
    notes: Union[None, _str, 'types.StringFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'

    # should be noted that AND and NOT should be Union['InterviewWhereInputRecursive4', List['InterviewWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['InterviewWhereInputRecursive4']
    OR: List['InterviewWhereInputRecursive4']
    NOT: List['InterviewWhereInputRecursive4']


class InterviewWhereInputRecursive4(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    candidateId: Union[_str, 'types.StringFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeFilter']
    duration: Union[_int, 'types.IntFilter']
    type: 'enums.InterviewType'
    notes: Union[None, _str, 'types.StringFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateRelationFilter'



# aggregate Interview types


    

class InterviewScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    type: 'enums.InterviewType'
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['InterviewScalarWhereWithAggregatesInputRecursive1']
    OR: List['InterviewScalarWhereWithAggregatesInputRecursive1']
    NOT: List['InterviewScalarWhereWithAggregatesInputRecursive1']


class InterviewScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    type: 'enums.InterviewType'
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['InterviewScalarWhereWithAggregatesInputRecursive2']
    OR: List['InterviewScalarWhereWithAggregatesInputRecursive2']
    NOT: List['InterviewScalarWhereWithAggregatesInputRecursive2']


class InterviewScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    type: 'enums.InterviewType'
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['InterviewScalarWhereWithAggregatesInputRecursive3']
    OR: List['InterviewScalarWhereWithAggregatesInputRecursive3']
    NOT: List['InterviewScalarWhereWithAggregatesInputRecursive3']


class InterviewScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    type: 'enums.InterviewType'
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['InterviewScalarWhereWithAggregatesInputRecursive4']
    OR: List['InterviewScalarWhereWithAggregatesInputRecursive4']
    NOT: List['InterviewScalarWhereWithAggregatesInputRecursive4']


class InterviewScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Interview arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    candidateId: Union[_str, 'types.StringWithAggregatesFilter']
    scheduledAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    type: 'enums.InterviewType'
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.InterviewStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class InterviewGroupByOutput(TypedDict, total=False):
    id: _str
    candidateId: _str
    scheduledAt: datetime.datetime
    duration: _int
    type: 'enums.InterviewType'
    notes: _str
    status: 'enums.InterviewStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'InterviewSumAggregateOutput'
    _avg: 'InterviewAvgAggregateOutput'
    _min: 'InterviewMinAggregateOutput'
    _max: 'InterviewMaxAggregateOutput'
    _count: 'InterviewCountAggregateOutput'


class InterviewAvgAggregateOutput(TypedDict, total=False):
    """Interview output for aggregating averages"""
    duration: float


class InterviewSumAggregateOutput(TypedDict, total=False):
    """Interview output for aggregating sums"""
    duration: _int


class InterviewScalarAggregateOutput(TypedDict, total=False):
    """Interview output including scalar fields"""
    id: _str
    candidateId: _str
    scheduledAt: datetime.datetime
    duration: _int
    type: 'enums.InterviewType'
    notes: _str
    status: 'enums.InterviewStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


InterviewMinAggregateOutput = InterviewScalarAggregateOutput
InterviewMaxAggregateOutput = InterviewScalarAggregateOutput


class InterviewMaxAggregateInput(TypedDict, total=False):
    """Interview input for aggregating by max"""
    id: bool
    candidateId: bool
    scheduledAt: bool
    duration: bool
    type: bool
    notes: bool
    status: bool
    createdAt: bool
    updatedAt: bool


class InterviewMinAggregateInput(TypedDict, total=False):
    """Interview input for aggregating by min"""
    id: bool
    candidateId: bool
    scheduledAt: bool
    duration: bool
    type: bool
    notes: bool
    status: bool
    createdAt: bool
    updatedAt: bool


class InterviewNumberAggregateInput(TypedDict, total=False):
    """Interview input for aggregating numbers"""
    duration: bool


InterviewAvgAggregateInput = InterviewNumberAggregateInput
InterviewSumAggregateInput = InterviewNumberAggregateInput


InterviewCountAggregateInput = TypedDict(
    'InterviewCountAggregateInput',
    {
        'id': bool,
        'candidateId': bool,
        'scheduledAt': bool,
        'duration': bool,
        'type': bool,
        'notes': bool,
        'status': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

InterviewCountAggregateOutput = TypedDict(
    'InterviewCountAggregateOutput',
    {
        'id': int,
        'candidateId': int,
        'scheduledAt': int,
        'duration': int,
        'type': int,
        'notes': int,
        'status': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


InterviewKeys = Literal[
    'id',
    'candidateId',
    'scheduledAt',
    'duration',
    'type',
    'notes',
    'status',
    'createdAt',
    'updatedAt',
    'Candidate',
]
InterviewScalarFieldKeys = Literal[
    'id',
    'candidateId',
    'scheduledAt',
    'duration',
    'type',
    'notes',
    'status',
    'createdAt',
    'updatedAt',
]
InterviewScalarFieldKeysT = TypeVar('InterviewScalarFieldKeysT', bound=InterviewScalarFieldKeys)

InterviewRelationalFieldKeys = Literal[
        'Candidate',
    ]

# Job types

class JobOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Job create method"""
    location: Optional[_str]
    salary: Optional[_str]
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: _str
    createdAt: datetime.datetime
    Candidate: 'CandidateCreateManyNestedWithoutRelationsInput'
    User: 'UserCreateNestedWithoutRelationsInput'


class JobCreateInput(JobOptionalCreateInput):
    """Required arguments to the Job create method"""
    id: _str
    title: _str
    description: _str
    company: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class JobOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Job create method, without relations"""
    location: Optional[_str]
    salary: Optional[_str]
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: _str
    createdAt: datetime.datetime


class JobCreateWithoutRelationsInput(JobOptionalCreateWithoutRelationsInput):
    """Required arguments to the Job create method, without relations"""
    id: _str
    title: _str
    description: _str
    company: _str
    updatedAt: datetime.datetime

class JobConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'JobCreateWithoutRelationsInput'
    where: 'JobWhereUniqueInput'

class JobCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'JobCreateWithoutRelationsInput'
    connect: 'JobWhereUniqueInput'
    connect_or_create: 'JobConnectOrCreateWithoutRelationsInput'


class JobCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['JobCreateWithoutRelationsInput', List['JobCreateWithoutRelationsInput']]
    connect: Union['JobWhereUniqueInput', List['JobWhereUniqueInput']]
    connect_or_create: Union['JobConnectOrCreateWithoutRelationsInput', List['JobConnectOrCreateWithoutRelationsInput']]

_JobWhereUnique_id_Input = TypedDict(
    '_JobWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

JobWhereUniqueInput = _JobWhereUnique_id_Input


class JobUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    description: _str
    company: _str
    location: Optional[_str]
    salary: Optional[_str]
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Candidate: 'CandidateUpdateManyWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'


class JobUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    description: _str
    company: _str
    location: Optional[_str]
    salary: Optional[_str]
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class JobUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['JobCreateWithoutRelationsInput']
    connect: List['JobWhereUniqueInput']
    connect_or_create: List['JobConnectOrCreateWithoutRelationsInput']
    set: List['JobWhereUniqueInput']
    disconnect: List['JobWhereUniqueInput']
    delete: List['JobWhereUniqueInput']

    # TODO
    # update: List['JobUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['JobUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['JobScalarWhereInput']
    # upsert: List['JobUpserteWithWhereUniqueWithoutRelationsInput']


class JobUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'JobCreateWithoutRelationsInput'
    connect: 'JobWhereUniqueInput'
    connect_or_create: 'JobConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'JobUpdateInput'
    # upsert: 'JobUpsertWithoutRelationsInput'


class JobUpsertInput(TypedDict):
    create: 'JobCreateInput'
    update: 'JobUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Job_id_OrderByInput = TypedDict(
    '_Job_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Job_title_OrderByInput = TypedDict(
    '_Job_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Job_description_OrderByInput = TypedDict(
    '_Job_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Job_company_OrderByInput = TypedDict(
    '_Job_company_OrderByInput',
    {
        'company': 'SortOrder',
    },
    total=True
)

_Job_location_OrderByInput = TypedDict(
    '_Job_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_Job_salary_OrderByInput = TypedDict(
    '_Job_salary_OrderByInput',
    {
        'salary': 'SortOrder',
    },
    total=True
)

_Job_type_OrderByInput = TypedDict(
    '_Job_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Job_status_OrderByInput = TypedDict(
    '_Job_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Job_userId_OrderByInput = TypedDict(
    '_Job_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Job_createdAt_OrderByInput = TypedDict(
    '_Job_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Job_updatedAt_OrderByInput = TypedDict(
    '_Job_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Job_RelevanceInner = TypedDict(
    '_Job_RelevanceInner',
    {
        'fields': 'List[JobScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Job_RelevanceOrderByInput = TypedDict(
    '_Job_RelevanceOrderByInput',
    {
        '_relevance': '_Job_RelevanceInner',
    },
    total=True
)

JobOrderByInput = Union[
    '_Job_id_OrderByInput',
    '_Job_title_OrderByInput',
    '_Job_description_OrderByInput',
    '_Job_company_OrderByInput',
    '_Job_location_OrderByInput',
    '_Job_salary_OrderByInput',
    '_Job_type_OrderByInput',
    '_Job_status_OrderByInput',
    '_Job_userId_OrderByInput',
    '_Job_createdAt_OrderByInput',
    '_Job_updatedAt_OrderByInput',
    '_Job_RelevanceOrderByInput',
]



# recursive Job types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

JobRelationFilter = TypedDict(
    'JobRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class JobListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class JobInclude(TypedDict, total=False):
    """Job relational arguments"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJob']
    User: Union[bool, 'UserArgsFromJob']


    

class AssessmentIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'CandidateArgsFromJobRecursive1']


class AssessmentIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'CandidateArgsFromJobRecursive2']


class AssessmentIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'CandidateArgsFromJobRecursive3']


class AssessmentIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'CandidateArgsFromJobRecursive4']


class AssessmentIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class AssessmentArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class AssessmentArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class AssessmentArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class AssessmentArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class AssessmentArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyAssessmentArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class FindManyAssessmentArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class FindManyAssessmentArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class FindManyAssessmentArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class FindManyAssessmentArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    
    

class CandidateIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromJobRecursive1']
    Job: Union[bool, 'JobArgsFromJobRecursive1']
    User: Union[bool, 'UserArgsFromJobRecursive1']
    Interview: Union[bool, 'FindManyInterviewArgsFromJobRecursive1']


class CandidateIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromJobRecursive2']
    Job: Union[bool, 'JobArgsFromJobRecursive2']
    User: Union[bool, 'UserArgsFromJobRecursive2']
    Interview: Union[bool, 'FindManyInterviewArgsFromJobRecursive2']


class CandidateIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromJobRecursive3']
    Job: Union[bool, 'JobArgsFromJobRecursive3']
    User: Union[bool, 'UserArgsFromJobRecursive3']
    Interview: Union[bool, 'FindManyInterviewArgsFromJobRecursive3']


class CandidateIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromJobRecursive4']
    Job: Union[bool, 'JobArgsFromJobRecursive4']
    User: Union[bool, 'UserArgsFromJobRecursive4']
    Interview: Union[bool, 'FindManyInterviewArgsFromJobRecursive4']


class CandidateIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class CandidateArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'CandidateIncludeFromCandidateRecursive1'


class CandidateArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'CandidateIncludeFromCandidateRecursive2'


class CandidateArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'CandidateIncludeFromCandidateRecursive3'


class CandidateArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'CandidateIncludeFromCandidateRecursive4'


class CandidateArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyCandidateArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive1'


class FindManyCandidateArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive2'


class FindManyCandidateArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive3'


class FindManyCandidateArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive4'


class FindManyCandidateArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    
    

class InterviewIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'CandidateArgsFromJobRecursive1']


class InterviewIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'CandidateArgsFromJobRecursive2']


class InterviewIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'CandidateArgsFromJobRecursive3']


class InterviewIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'CandidateArgsFromJobRecursive4']


class InterviewIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class InterviewArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'InterviewIncludeFromInterviewRecursive1'


class InterviewArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'InterviewIncludeFromInterviewRecursive2'


class InterviewArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'InterviewIncludeFromInterviewRecursive3'


class InterviewArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'InterviewIncludeFromInterviewRecursive4'


class InterviewArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyInterviewArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive1'


class FindManyInterviewArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive2'


class FindManyInterviewArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive3'


class FindManyInterviewArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive4'


class FindManyInterviewArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    
    

class JobIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJobRecursive1']
    User: Union[bool, 'UserArgsFromJobRecursive1']


class JobIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJobRecursive2']
    User: Union[bool, 'UserArgsFromJobRecursive2']


class JobIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJobRecursive3']
    User: Union[bool, 'UserArgsFromJobRecursive3']


class JobIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJobRecursive4']
    User: Union[bool, 'UserArgsFromJobRecursive4']


class JobIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class JobArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyJobArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class ProfileIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    User: Union[bool, 'UserArgsFromJobRecursive1']


class ProfileIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    User: Union[bool, 'UserArgsFromJobRecursive2']


class ProfileIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    User: Union[bool, 'UserArgsFromJobRecursive3']


class ProfileIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    User: Union[bool, 'UserArgsFromJobRecursive4']


class ProfileIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class ProfileArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyProfileArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class TokenIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    User: Union[bool, 'UserArgsFromJobRecursive1']


class TokenIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    User: Union[bool, 'UserArgsFromJobRecursive2']


class TokenIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    User: Union[bool, 'UserArgsFromJobRecursive3']


class TokenIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    User: Union[bool, 'UserArgsFromJobRecursive4']


class TokenIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class TokenArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyTokenArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class UserIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJobRecursive1']
    Job: Union[bool, 'FindManyJobArgsFromJobRecursive1']
    Profile: Union[bool, 'FindManyProfileArgsFromJobRecursive1']
    Token: Union[bool, 'FindManyTokenArgsFromJobRecursive1']


class UserIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJobRecursive2']
    Job: Union[bool, 'FindManyJobArgsFromJobRecursive2']
    Profile: Union[bool, 'FindManyProfileArgsFromJobRecursive2']
    Token: Union[bool, 'FindManyTokenArgsFromJobRecursive2']


class UserIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJobRecursive3']
    Job: Union[bool, 'FindManyJobArgsFromJobRecursive3']
    Profile: Union[bool, 'FindManyProfileArgsFromJobRecursive3']
    Token: Union[bool, 'FindManyTokenArgsFromJobRecursive3']


class UserIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromJobRecursive4']
    Job: Union[bool, 'FindManyJobArgsFromJobRecursive4']
    Profile: Union[bool, 'FindManyProfileArgsFromJobRecursive4']
    Token: Union[bool, 'FindManyTokenArgsFromJobRecursive4']


class UserIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class UserArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyUserArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyJobArgs = FindManyJobArgsFromJob
FindFirstJobArgs = FindManyJobArgsFromJob


    

class JobWhereInput(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    salary: Union[None, _str, 'types.StringFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobWhereInputRecursive1', List['JobWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['JobWhereInputRecursive1']
    OR: List['JobWhereInputRecursive1']
    NOT: List['JobWhereInputRecursive1']


class JobWhereInputRecursive1(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    salary: Union[None, _str, 'types.StringFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobWhereInputRecursive2', List['JobWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['JobWhereInputRecursive2']
    OR: List['JobWhereInputRecursive2']
    NOT: List['JobWhereInputRecursive2']


class JobWhereInputRecursive2(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    salary: Union[None, _str, 'types.StringFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobWhereInputRecursive3', List['JobWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['JobWhereInputRecursive3']
    OR: List['JobWhereInputRecursive3']
    NOT: List['JobWhereInputRecursive3']


class JobWhereInputRecursive3(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    salary: Union[None, _str, 'types.StringFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobWhereInputRecursive4', List['JobWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['JobWhereInputRecursive4']
    OR: List['JobWhereInputRecursive4']
    NOT: List['JobWhereInputRecursive4']


class JobWhereInputRecursive4(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    salary: Union[None, _str, 'types.StringFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    User: 'UserRelationFilter'



# aggregate Job types


    

class JobScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    salary: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['JobScalarWhereWithAggregatesInputRecursive1']
    OR: List['JobScalarWhereWithAggregatesInputRecursive1']
    NOT: List['JobScalarWhereWithAggregatesInputRecursive1']


class JobScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    salary: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['JobScalarWhereWithAggregatesInputRecursive2']
    OR: List['JobScalarWhereWithAggregatesInputRecursive2']
    NOT: List['JobScalarWhereWithAggregatesInputRecursive2']


class JobScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    salary: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['JobScalarWhereWithAggregatesInputRecursive3']
    OR: List['JobScalarWhereWithAggregatesInputRecursive3']
    NOT: List['JobScalarWhereWithAggregatesInputRecursive3']


class JobScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    salary: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['JobScalarWhereWithAggregatesInputRecursive4']
    OR: List['JobScalarWhereWithAggregatesInputRecursive4']
    NOT: List['JobScalarWhereWithAggregatesInputRecursive4']


class JobScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    salary: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class JobGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    description: _str
    company: _str
    location: _str
    salary: _str
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'JobSumAggregateOutput'
    _avg: 'JobAvgAggregateOutput'
    _min: 'JobMinAggregateOutput'
    _max: 'JobMaxAggregateOutput'
    _count: 'JobCountAggregateOutput'


class JobAvgAggregateOutput(TypedDict, total=False):
    """Job output for aggregating averages"""


class JobSumAggregateOutput(TypedDict, total=False):
    """Job output for aggregating sums"""


class JobScalarAggregateOutput(TypedDict, total=False):
    """Job output including scalar fields"""
    id: _str
    title: _str
    description: _str
    company: _str
    location: _str
    salary: _str
    type: 'enums.JobType'
    status: 'enums.JobStatus'
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


JobMinAggregateOutput = JobScalarAggregateOutput
JobMaxAggregateOutput = JobScalarAggregateOutput


class JobMaxAggregateInput(TypedDict, total=False):
    """Job input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    company: bool
    location: bool
    salary: bool
    type: bool
    status: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class JobMinAggregateInput(TypedDict, total=False):
    """Job input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    company: bool
    location: bool
    salary: bool
    type: bool
    status: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class JobNumberAggregateInput(TypedDict, total=False):
    """Job input for aggregating numbers"""


JobAvgAggregateInput = JobNumberAggregateInput
JobSumAggregateInput = JobNumberAggregateInput


JobCountAggregateInput = TypedDict(
    'JobCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'company': bool,
        'location': bool,
        'salary': bool,
        'type': bool,
        'status': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

JobCountAggregateOutput = TypedDict(
    'JobCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'company': int,
        'location': int,
        'salary': int,
        'type': int,
        'status': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


JobKeys = Literal[
    'id',
    'title',
    'description',
    'company',
    'location',
    'salary',
    'type',
    'status',
    'userId',
    'createdAt',
    'updatedAt',
    'Candidate',
    'User',
]
JobScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'company',
    'location',
    'salary',
    'type',
    'status',
    'userId',
    'createdAt',
    'updatedAt',
]
JobScalarFieldKeysT = TypeVar('JobScalarFieldKeysT', bound=JobScalarFieldKeys)

JobRelationalFieldKeys = Literal[
        'Candidate',
        'User',
    ]

# Profile types

class ProfileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Profile create method"""
    userId: _str
    title: Optional[_str]
    company: Optional[_str]
    bio: Optional[_str]
    avatar: Optional[_str]
    createdAt: datetime.datetime
    User: 'UserCreateNestedWithoutRelationsInput'


class ProfileCreateInput(ProfileOptionalCreateInput):
    """Required arguments to the Profile create method"""
    id: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProfileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Profile create method, without relations"""
    userId: _str
    title: Optional[_str]
    company: Optional[_str]
    bio: Optional[_str]
    avatar: Optional[_str]
    createdAt: datetime.datetime


class ProfileCreateWithoutRelationsInput(ProfileOptionalCreateWithoutRelationsInput):
    """Required arguments to the Profile create method, without relations"""
    id: _str
    updatedAt: datetime.datetime

class ProfileConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProfileCreateWithoutRelationsInput'
    where: 'ProfileWhereUniqueInput'

class ProfileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    connect_or_create: 'ProfileConnectOrCreateWithoutRelationsInput'


class ProfileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProfileCreateWithoutRelationsInput', List['ProfileCreateWithoutRelationsInput']]
    connect: Union['ProfileWhereUniqueInput', List['ProfileWhereUniqueInput']]
    connect_or_create: Union['ProfileConnectOrCreateWithoutRelationsInput', List['ProfileConnectOrCreateWithoutRelationsInput']]

_ProfileWhereUnique_id_Input = TypedDict(
    '_ProfileWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ProfileWhereUniqueInput = _ProfileWhereUnique_id_Input


class ProfileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: Optional[_str]
    company: Optional[_str]
    bio: Optional[_str]
    avatar: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    User: 'UserUpdateOneWithoutRelationsInput'


class ProfileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: Optional[_str]
    company: Optional[_str]
    bio: Optional[_str]
    avatar: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProfileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProfileCreateWithoutRelationsInput']
    connect: List['ProfileWhereUniqueInput']
    connect_or_create: List['ProfileConnectOrCreateWithoutRelationsInput']
    set: List['ProfileWhereUniqueInput']
    disconnect: List['ProfileWhereUniqueInput']
    delete: List['ProfileWhereUniqueInput']

    # TODO
    # update: List['ProfileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProfileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProfileScalarWhereInput']
    # upsert: List['ProfileUpserteWithWhereUniqueWithoutRelationsInput']


class ProfileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    connect_or_create: 'ProfileConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProfileUpdateInput'
    # upsert: 'ProfileUpsertWithoutRelationsInput'


class ProfileUpsertInput(TypedDict):
    create: 'ProfileCreateInput'
    update: 'ProfileUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Profile_id_OrderByInput = TypedDict(
    '_Profile_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Profile_userId_OrderByInput = TypedDict(
    '_Profile_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Profile_title_OrderByInput = TypedDict(
    '_Profile_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Profile_company_OrderByInput = TypedDict(
    '_Profile_company_OrderByInput',
    {
        'company': 'SortOrder',
    },
    total=True
)

_Profile_bio_OrderByInput = TypedDict(
    '_Profile_bio_OrderByInput',
    {
        'bio': 'SortOrder',
    },
    total=True
)

_Profile_avatar_OrderByInput = TypedDict(
    '_Profile_avatar_OrderByInput',
    {
        'avatar': 'SortOrder',
    },
    total=True
)

_Profile_createdAt_OrderByInput = TypedDict(
    '_Profile_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Profile_updatedAt_OrderByInput = TypedDict(
    '_Profile_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Profile_RelevanceInner = TypedDict(
    '_Profile_RelevanceInner',
    {
        'fields': 'List[ProfileScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Profile_RelevanceOrderByInput = TypedDict(
    '_Profile_RelevanceOrderByInput',
    {
        '_relevance': '_Profile_RelevanceInner',
    },
    total=True
)

ProfileOrderByInput = Union[
    '_Profile_id_OrderByInput',
    '_Profile_userId_OrderByInput',
    '_Profile_title_OrderByInput',
    '_Profile_company_OrderByInput',
    '_Profile_bio_OrderByInput',
    '_Profile_avatar_OrderByInput',
    '_Profile_createdAt_OrderByInput',
    '_Profile_updatedAt_OrderByInput',
    '_Profile_RelevanceOrderByInput',
]



# recursive Profile types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProfileRelationFilter = TypedDict(
    'ProfileRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProfileListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProfileInclude(TypedDict, total=False):
    """Profile relational arguments"""
    User: Union[bool, 'UserArgsFromProfile']


    

class AssessmentIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'CandidateArgsFromProfileRecursive1']


class AssessmentIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'CandidateArgsFromProfileRecursive2']


class AssessmentIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'CandidateArgsFromProfileRecursive3']


class AssessmentIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'CandidateArgsFromProfileRecursive4']


class AssessmentIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class AssessmentArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class AssessmentArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class AssessmentArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class AssessmentArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class AssessmentArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyAssessmentArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class FindManyAssessmentArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class FindManyAssessmentArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class FindManyAssessmentArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class FindManyAssessmentArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    
    

class CandidateIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromProfileRecursive1']
    Job: Union[bool, 'JobArgsFromProfileRecursive1']
    User: Union[bool, 'UserArgsFromProfileRecursive1']
    Interview: Union[bool, 'FindManyInterviewArgsFromProfileRecursive1']


class CandidateIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromProfileRecursive2']
    Job: Union[bool, 'JobArgsFromProfileRecursive2']
    User: Union[bool, 'UserArgsFromProfileRecursive2']
    Interview: Union[bool, 'FindManyInterviewArgsFromProfileRecursive2']


class CandidateIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromProfileRecursive3']
    Job: Union[bool, 'JobArgsFromProfileRecursive3']
    User: Union[bool, 'UserArgsFromProfileRecursive3']
    Interview: Union[bool, 'FindManyInterviewArgsFromProfileRecursive3']


class CandidateIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromProfileRecursive4']
    Job: Union[bool, 'JobArgsFromProfileRecursive4']
    User: Union[bool, 'UserArgsFromProfileRecursive4']
    Interview: Union[bool, 'FindManyInterviewArgsFromProfileRecursive4']


class CandidateIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class CandidateArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CandidateIncludeFromCandidateRecursive1'


class CandidateArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CandidateIncludeFromCandidateRecursive2'


class CandidateArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CandidateIncludeFromCandidateRecursive3'


class CandidateArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CandidateIncludeFromCandidateRecursive4'


class CandidateArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyCandidateArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive1'


class FindManyCandidateArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive2'


class FindManyCandidateArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive3'


class FindManyCandidateArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive4'


class FindManyCandidateArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    
    

class InterviewIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'CandidateArgsFromProfileRecursive1']


class InterviewIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'CandidateArgsFromProfileRecursive2']


class InterviewIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'CandidateArgsFromProfileRecursive3']


class InterviewIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'CandidateArgsFromProfileRecursive4']


class InterviewIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class InterviewArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'InterviewIncludeFromInterviewRecursive1'


class InterviewArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'InterviewIncludeFromInterviewRecursive2'


class InterviewArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'InterviewIncludeFromInterviewRecursive3'


class InterviewArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'InterviewIncludeFromInterviewRecursive4'


class InterviewArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyInterviewArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive1'


class FindManyInterviewArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive2'


class FindManyInterviewArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive3'


class FindManyInterviewArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive4'


class FindManyInterviewArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    
    

class JobIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromProfileRecursive1']
    User: Union[bool, 'UserArgsFromProfileRecursive1']


class JobIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromProfileRecursive2']
    User: Union[bool, 'UserArgsFromProfileRecursive2']


class JobIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromProfileRecursive3']
    User: Union[bool, 'UserArgsFromProfileRecursive3']


class JobIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromProfileRecursive4']
    User: Union[bool, 'UserArgsFromProfileRecursive4']


class JobIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class JobArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyJobArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class ProfileIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive1']


class ProfileIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive2']


class ProfileIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive3']


class ProfileIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive4']


class ProfileIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class TokenIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive1']


class TokenIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive2']


class TokenIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive3']


class TokenIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive4']


class TokenIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class TokenArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyTokenArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class UserIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromProfileRecursive1']
    Job: Union[bool, 'FindManyJobArgsFromProfileRecursive1']
    Profile: Union[bool, 'FindManyProfileArgsFromProfileRecursive1']
    Token: Union[bool, 'FindManyTokenArgsFromProfileRecursive1']


class UserIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromProfileRecursive2']
    Job: Union[bool, 'FindManyJobArgsFromProfileRecursive2']
    Profile: Union[bool, 'FindManyProfileArgsFromProfileRecursive2']
    Token: Union[bool, 'FindManyTokenArgsFromProfileRecursive2']


class UserIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromProfileRecursive3']
    Job: Union[bool, 'FindManyJobArgsFromProfileRecursive3']
    Profile: Union[bool, 'FindManyProfileArgsFromProfileRecursive3']
    Token: Union[bool, 'FindManyTokenArgsFromProfileRecursive3']


class UserIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromProfileRecursive4']
    Job: Union[bool, 'FindManyJobArgsFromProfileRecursive4']
    Profile: Union[bool, 'FindManyProfileArgsFromProfileRecursive4']
    Token: Union[bool, 'FindManyTokenArgsFromProfileRecursive4']


class UserIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class UserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyUserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyProfileArgs = FindManyProfileArgsFromProfile
FindFirstProfileArgs = FindManyProfileArgsFromProfile


    

class ProfileWhereInput(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive1', List['ProfileWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive1']
    OR: List['ProfileWhereInputRecursive1']
    NOT: List['ProfileWhereInputRecursive1']


class ProfileWhereInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive2', List['ProfileWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive2']
    OR: List['ProfileWhereInputRecursive2']
    NOT: List['ProfileWhereInputRecursive2']


class ProfileWhereInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive3', List['ProfileWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive3']
    OR: List['ProfileWhereInputRecursive3']
    NOT: List['ProfileWhereInputRecursive3']


class ProfileWhereInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive4', List['ProfileWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive4']
    OR: List['ProfileWhereInputRecursive4']
    NOT: List['ProfileWhereInputRecursive4']


class ProfileWhereInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'



# aggregate Profile types


    

class ProfileScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive1']


class ProfileScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive2']


class ProfileScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive3']


class ProfileScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive4']


class ProfileScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ProfileGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    title: _str
    company: _str
    bio: _str
    avatar: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ProfileSumAggregateOutput'
    _avg: 'ProfileAvgAggregateOutput'
    _min: 'ProfileMinAggregateOutput'
    _max: 'ProfileMaxAggregateOutput'
    _count: 'ProfileCountAggregateOutput'


class ProfileAvgAggregateOutput(TypedDict, total=False):
    """Profile output for aggregating averages"""


class ProfileSumAggregateOutput(TypedDict, total=False):
    """Profile output for aggregating sums"""


class ProfileScalarAggregateOutput(TypedDict, total=False):
    """Profile output including scalar fields"""
    id: _str
    userId: _str
    title: _str
    company: _str
    bio: _str
    avatar: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ProfileMinAggregateOutput = ProfileScalarAggregateOutput
ProfileMaxAggregateOutput = ProfileScalarAggregateOutput


class ProfileMaxAggregateInput(TypedDict, total=False):
    """Profile input for aggregating by max"""
    id: bool
    userId: bool
    title: bool
    company: bool
    bio: bool
    avatar: bool
    createdAt: bool
    updatedAt: bool


class ProfileMinAggregateInput(TypedDict, total=False):
    """Profile input for aggregating by min"""
    id: bool
    userId: bool
    title: bool
    company: bool
    bio: bool
    avatar: bool
    createdAt: bool
    updatedAt: bool


class ProfileNumberAggregateInput(TypedDict, total=False):
    """Profile input for aggregating numbers"""


ProfileAvgAggregateInput = ProfileNumberAggregateInput
ProfileSumAggregateInput = ProfileNumberAggregateInput


ProfileCountAggregateInput = TypedDict(
    'ProfileCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'title': bool,
        'company': bool,
        'bio': bool,
        'avatar': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ProfileCountAggregateOutput = TypedDict(
    'ProfileCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'title': int,
        'company': int,
        'bio': int,
        'avatar': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ProfileKeys = Literal[
    'id',
    'userId',
    'title',
    'company',
    'bio',
    'avatar',
    'createdAt',
    'updatedAt',
    'User',
]
ProfileScalarFieldKeys = Literal[
    'id',
    'userId',
    'title',
    'company',
    'bio',
    'avatar',
    'createdAt',
    'updatedAt',
]
ProfileScalarFieldKeysT = TypeVar('ProfileScalarFieldKeysT', bound=ProfileScalarFieldKeys)

ProfileRelationalFieldKeys = Literal[
        'User',
    ]

# Token types

class TokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Token create method"""
    userId: _str
    createdAt: datetime.datetime
    User: 'UserCreateNestedWithoutRelationsInput'


class TokenCreateInput(TokenOptionalCreateInput):
    """Required arguments to the Token create method"""
    id: _str
    token: _str
    expiresAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Token create method, without relations"""
    userId: _str
    createdAt: datetime.datetime


class TokenCreateWithoutRelationsInput(TokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the Token create method, without relations"""
    id: _str
    token: _str
    expiresAt: datetime.datetime

class TokenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TokenCreateWithoutRelationsInput'
    where: 'TokenWhereUniqueInput'

class TokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TokenCreateWithoutRelationsInput'
    connect: 'TokenWhereUniqueInput'
    connect_or_create: 'TokenConnectOrCreateWithoutRelationsInput'


class TokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TokenCreateWithoutRelationsInput', List['TokenCreateWithoutRelationsInput']]
    connect: Union['TokenWhereUniqueInput', List['TokenWhereUniqueInput']]
    connect_or_create: Union['TokenConnectOrCreateWithoutRelationsInput', List['TokenConnectOrCreateWithoutRelationsInput']]

_TokenWhereUnique_id_Input = TypedDict(
    '_TokenWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_TokenWhereUnique_token_Input = TypedDict(
    '_TokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

TokenWhereUniqueInput = Union[
    '_TokenWhereUnique_id_Input',
    '_TokenWhereUnique_token_Input',
]


class TokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime
    User: 'UserUpdateOneWithoutRelationsInput'


class TokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime


class TokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TokenCreateWithoutRelationsInput']
    connect: List['TokenWhereUniqueInput']
    connect_or_create: List['TokenConnectOrCreateWithoutRelationsInput']
    set: List['TokenWhereUniqueInput']
    disconnect: List['TokenWhereUniqueInput']
    delete: List['TokenWhereUniqueInput']

    # TODO
    # update: List['TokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TokenScalarWhereInput']
    # upsert: List['TokenUpserteWithWhereUniqueWithoutRelationsInput']


class TokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TokenCreateWithoutRelationsInput'
    connect: 'TokenWhereUniqueInput'
    connect_or_create: 'TokenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TokenUpdateInput'
    # upsert: 'TokenUpsertWithoutRelationsInput'


class TokenUpsertInput(TypedDict):
    create: 'TokenCreateInput'
    update: 'TokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Token_id_OrderByInput = TypedDict(
    '_Token_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Token_token_OrderByInput = TypedDict(
    '_Token_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_Token_userId_OrderByInput = TypedDict(
    '_Token_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Token_expiresAt_OrderByInput = TypedDict(
    '_Token_expiresAt_OrderByInput',
    {
        'expiresAt': 'SortOrder',
    },
    total=True
)

_Token_createdAt_OrderByInput = TypedDict(
    '_Token_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Token_RelevanceInner = TypedDict(
    '_Token_RelevanceInner',
    {
        'fields': 'List[TokenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Token_RelevanceOrderByInput = TypedDict(
    '_Token_RelevanceOrderByInput',
    {
        '_relevance': '_Token_RelevanceInner',
    },
    total=True
)

TokenOrderByInput = Union[
    '_Token_id_OrderByInput',
    '_Token_token_OrderByInput',
    '_Token_userId_OrderByInput',
    '_Token_expiresAt_OrderByInput',
    '_Token_createdAt_OrderByInput',
    '_Token_RelevanceOrderByInput',
]



# recursive Token types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TokenRelationFilter = TypedDict(
    'TokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TokenInclude(TypedDict, total=False):
    """Token relational arguments"""
    User: Union[bool, 'UserArgsFromToken']


    

class AssessmentIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'CandidateArgsFromTokenRecursive1']


class AssessmentIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'CandidateArgsFromTokenRecursive2']


class AssessmentIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'CandidateArgsFromTokenRecursive3']


class AssessmentIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'CandidateArgsFromTokenRecursive4']


class AssessmentIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class AssessmentArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class AssessmentArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class AssessmentArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class AssessmentArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class AssessmentArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyAssessmentArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class FindManyAssessmentArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class FindManyAssessmentArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class FindManyAssessmentArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class FindManyAssessmentArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    
    

class CandidateIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromTokenRecursive1']
    Job: Union[bool, 'JobArgsFromTokenRecursive1']
    User: Union[bool, 'UserArgsFromTokenRecursive1']
    Interview: Union[bool, 'FindManyInterviewArgsFromTokenRecursive1']


class CandidateIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromTokenRecursive2']
    Job: Union[bool, 'JobArgsFromTokenRecursive2']
    User: Union[bool, 'UserArgsFromTokenRecursive2']
    Interview: Union[bool, 'FindManyInterviewArgsFromTokenRecursive2']


class CandidateIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromTokenRecursive3']
    Job: Union[bool, 'JobArgsFromTokenRecursive3']
    User: Union[bool, 'UserArgsFromTokenRecursive3']
    Interview: Union[bool, 'FindManyInterviewArgsFromTokenRecursive3']


class CandidateIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromTokenRecursive4']
    Job: Union[bool, 'JobArgsFromTokenRecursive4']
    User: Union[bool, 'UserArgsFromTokenRecursive4']
    Interview: Union[bool, 'FindManyInterviewArgsFromTokenRecursive4']


class CandidateIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class CandidateArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'CandidateIncludeFromCandidateRecursive1'


class CandidateArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'CandidateIncludeFromCandidateRecursive2'


class CandidateArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'CandidateIncludeFromCandidateRecursive3'


class CandidateArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'CandidateIncludeFromCandidateRecursive4'


class CandidateArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyCandidateArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive1'


class FindManyCandidateArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive2'


class FindManyCandidateArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive3'


class FindManyCandidateArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive4'


class FindManyCandidateArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    
    

class InterviewIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'CandidateArgsFromTokenRecursive1']


class InterviewIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'CandidateArgsFromTokenRecursive2']


class InterviewIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'CandidateArgsFromTokenRecursive3']


class InterviewIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'CandidateArgsFromTokenRecursive4']


class InterviewIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class InterviewArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'InterviewIncludeFromInterviewRecursive1'


class InterviewArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'InterviewIncludeFromInterviewRecursive2'


class InterviewArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'InterviewIncludeFromInterviewRecursive3'


class InterviewArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'InterviewIncludeFromInterviewRecursive4'


class InterviewArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyInterviewArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive1'


class FindManyInterviewArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive2'


class FindManyInterviewArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive3'


class FindManyInterviewArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive4'


class FindManyInterviewArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    
    

class JobIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromTokenRecursive1']
    User: Union[bool, 'UserArgsFromTokenRecursive1']


class JobIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromTokenRecursive2']
    User: Union[bool, 'UserArgsFromTokenRecursive2']


class JobIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromTokenRecursive3']
    User: Union[bool, 'UserArgsFromTokenRecursive3']


class JobIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromTokenRecursive4']
    User: Union[bool, 'UserArgsFromTokenRecursive4']


class JobIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class JobArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyJobArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class ProfileIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    User: Union[bool, 'UserArgsFromTokenRecursive1']


class ProfileIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    User: Union[bool, 'UserArgsFromTokenRecursive2']


class ProfileIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    User: Union[bool, 'UserArgsFromTokenRecursive3']


class ProfileIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    User: Union[bool, 'UserArgsFromTokenRecursive4']


class ProfileIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class ProfileArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyProfileArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class TokenIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    User: Union[bool, 'UserArgsFromTokenRecursive1']


class TokenIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    User: Union[bool, 'UserArgsFromTokenRecursive2']


class TokenIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    User: Union[bool, 'UserArgsFromTokenRecursive3']


class TokenIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    User: Union[bool, 'UserArgsFromTokenRecursive4']


class TokenIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class TokenArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyTokenArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class UserIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromTokenRecursive1']
    Job: Union[bool, 'FindManyJobArgsFromTokenRecursive1']
    Profile: Union[bool, 'FindManyProfileArgsFromTokenRecursive1']
    Token: Union[bool, 'FindManyTokenArgsFromTokenRecursive1']


class UserIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromTokenRecursive2']
    Job: Union[bool, 'FindManyJobArgsFromTokenRecursive2']
    Profile: Union[bool, 'FindManyProfileArgsFromTokenRecursive2']
    Token: Union[bool, 'FindManyTokenArgsFromTokenRecursive2']


class UserIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromTokenRecursive3']
    Job: Union[bool, 'FindManyJobArgsFromTokenRecursive3']
    Profile: Union[bool, 'FindManyProfileArgsFromTokenRecursive3']
    Token: Union[bool, 'FindManyTokenArgsFromTokenRecursive3']


class UserIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromTokenRecursive4']
    Job: Union[bool, 'FindManyJobArgsFromTokenRecursive4']
    Profile: Union[bool, 'FindManyProfileArgsFromTokenRecursive4']
    Token: Union[bool, 'FindManyTokenArgsFromTokenRecursive4']


class UserIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class UserArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyUserArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyTokenArgs = FindManyTokenArgsFromToken
FindFirstTokenArgs = FindManyTokenArgsFromToken


    

class TokenWhereInput(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TokenWhereInputRecursive1', List['TokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TokenWhereInputRecursive1']
    OR: List['TokenWhereInputRecursive1']
    NOT: List['TokenWhereInputRecursive1']


class TokenWhereInputRecursive1(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TokenWhereInputRecursive2', List['TokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TokenWhereInputRecursive2']
    OR: List['TokenWhereInputRecursive2']
    NOT: List['TokenWhereInputRecursive2']


class TokenWhereInputRecursive2(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TokenWhereInputRecursive3', List['TokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TokenWhereInputRecursive3']
    OR: List['TokenWhereInputRecursive3']
    NOT: List['TokenWhereInputRecursive3']


class TokenWhereInputRecursive3(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TokenWhereInputRecursive4', List['TokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TokenWhereInputRecursive4']
    OR: List['TokenWhereInputRecursive4']
    NOT: List['TokenWhereInputRecursive4']


class TokenWhereInputRecursive4(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'



# aggregate Token types


    

class TokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['TokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TokenScalarWhereWithAggregatesInputRecursive1']


class TokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['TokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TokenScalarWhereWithAggregatesInputRecursive2']


class TokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['TokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TokenScalarWhereWithAggregatesInputRecursive3']


class TokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['TokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TokenScalarWhereWithAggregatesInputRecursive4']


class TokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class TokenGroupByOutput(TypedDict, total=False):
    id: _str
    token: _str
    userId: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime
    _sum: 'TokenSumAggregateOutput'
    _avg: 'TokenAvgAggregateOutput'
    _min: 'TokenMinAggregateOutput'
    _max: 'TokenMaxAggregateOutput'
    _count: 'TokenCountAggregateOutput'


class TokenAvgAggregateOutput(TypedDict, total=False):
    """Token output for aggregating averages"""


class TokenSumAggregateOutput(TypedDict, total=False):
    """Token output for aggregating sums"""


class TokenScalarAggregateOutput(TypedDict, total=False):
    """Token output including scalar fields"""
    id: _str
    token: _str
    userId: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime


TokenMinAggregateOutput = TokenScalarAggregateOutput
TokenMaxAggregateOutput = TokenScalarAggregateOutput


class TokenMaxAggregateInput(TypedDict, total=False):
    """Token input for aggregating by max"""
    id: bool
    token: bool
    userId: bool
    expiresAt: bool
    createdAt: bool


class TokenMinAggregateInput(TypedDict, total=False):
    """Token input for aggregating by min"""
    id: bool
    token: bool
    userId: bool
    expiresAt: bool
    createdAt: bool


class TokenNumberAggregateInput(TypedDict, total=False):
    """Token input for aggregating numbers"""


TokenAvgAggregateInput = TokenNumberAggregateInput
TokenSumAggregateInput = TokenNumberAggregateInput


TokenCountAggregateInput = TypedDict(
    'TokenCountAggregateInput',
    {
        'id': bool,
        'token': bool,
        'userId': bool,
        'expiresAt': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

TokenCountAggregateOutput = TypedDict(
    'TokenCountAggregateOutput',
    {
        'id': int,
        'token': int,
        'userId': int,
        'expiresAt': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


TokenKeys = Literal[
    'id',
    'token',
    'userId',
    'expiresAt',
    'createdAt',
    'User',
]
TokenScalarFieldKeys = Literal[
    'id',
    'token',
    'userId',
    'expiresAt',
    'createdAt',
]
TokenScalarFieldKeysT = TypeVar('TokenScalarFieldKeysT', bound=TokenScalarFieldKeys)

TokenRelationalFieldKeys = Literal[
        'User',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    firstName: Optional[_str]
    lastName: Optional[_str]
    role: 'enums.Role'
    createdAt: datetime.datetime
    Candidate: 'CandidateCreateManyNestedWithoutRelationsInput'
    Job: 'JobCreateManyNestedWithoutRelationsInput'
    Profile: 'ProfileCreateManyNestedWithoutRelationsInput'
    Token: 'TokenCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    id: _str
    email: _str
    password: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    firstName: Optional[_str]
    lastName: Optional[_str]
    role: 'enums.Role'
    createdAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    id: _str
    email: _str
    password: _str
    updatedAt: datetime.datetime

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    password: _str
    firstName: Optional[_str]
    lastName: Optional[_str]
    role: 'enums.Role'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Candidate: 'CandidateUpdateManyWithoutRelationsInput'
    Job: 'JobUpdateManyWithoutRelationsInput'
    Profile: 'ProfileUpdateManyWithoutRelationsInput'
    Token: 'TokenUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    password: _str
    firstName: Optional[_str]
    lastName: Optional[_str]
    role: 'enums.Role'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_firstName_OrderByInput = TypedDict(
    '_User_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_User_lastName_OrderByInput = TypedDict(
    '_User_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_firstName_OrderByInput',
    '_User_lastName_OrderByInput',
    '_User_role_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUser']
    Job: Union[bool, 'FindManyJobArgsFromUser']
    Profile: Union[bool, 'FindManyProfileArgsFromUser']
    Token: Union[bool, 'FindManyTokenArgsFromUser']


    

class AssessmentIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'CandidateArgsFromUserRecursive1']


class AssessmentIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'CandidateArgsFromUserRecursive2']


class AssessmentIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'CandidateArgsFromUserRecursive3']


class AssessmentIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'CandidateArgsFromUserRecursive4']


class AssessmentIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AssessmentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class AssessmentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class AssessmentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class AssessmentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class AssessmentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAssessmentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive1'


class FindManyAssessmentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive2'


class FindManyAssessmentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive3'


class FindManyAssessmentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    include: 'AssessmentIncludeFromAssessmentRecursive4'


class FindManyAssessmentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssessmentOrderByInput', List['AssessmentOrderByInput']]
    where: 'AssessmentWhereInput'
    cursor: 'AssessmentWhereUniqueInput'
    distinct: List['AssessmentScalarFieldKeys']
    
    

class CandidateIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromUserRecursive1']
    Job: Union[bool, 'JobArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']
    Interview: Union[bool, 'FindManyInterviewArgsFromUserRecursive1']


class CandidateIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromUserRecursive2']
    Job: Union[bool, 'JobArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']
    Interview: Union[bool, 'FindManyInterviewArgsFromUserRecursive2']


class CandidateIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromUserRecursive3']
    Job: Union[bool, 'JobArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']
    Interview: Union[bool, 'FindManyInterviewArgsFromUserRecursive3']


class CandidateIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Assessment: Union[bool, 'FindManyAssessmentArgsFromUserRecursive4']
    Job: Union[bool, 'JobArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']
    Interview: Union[bool, 'FindManyInterviewArgsFromUserRecursive4']


class CandidateIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CandidateArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CandidateIncludeFromCandidateRecursive1'


class CandidateArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CandidateIncludeFromCandidateRecursive2'


class CandidateArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CandidateIncludeFromCandidateRecursive3'


class CandidateArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CandidateIncludeFromCandidateRecursive4'


class CandidateArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCandidateArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive1'


class FindManyCandidateArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive2'


class FindManyCandidateArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive3'


class FindManyCandidateArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    include: 'CandidateIncludeFromCandidateRecursive4'


class FindManyCandidateArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CandidateOrderByInput', List['CandidateOrderByInput']]
    where: 'CandidateWhereInput'
    cursor: 'CandidateWhereUniqueInput'
    distinct: List['CandidateScalarFieldKeys']
    
    

class InterviewIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'CandidateArgsFromUserRecursive1']


class InterviewIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'CandidateArgsFromUserRecursive2']


class InterviewIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'CandidateArgsFromUserRecursive3']


class InterviewIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'CandidateArgsFromUserRecursive4']


class InterviewIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class InterviewArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'InterviewIncludeFromInterviewRecursive1'


class InterviewArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'InterviewIncludeFromInterviewRecursive2'


class InterviewArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'InterviewIncludeFromInterviewRecursive3'


class InterviewArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'InterviewIncludeFromInterviewRecursive4'


class InterviewArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyInterviewArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive1'


class FindManyInterviewArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive2'


class FindManyInterviewArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive3'


class FindManyInterviewArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    include: 'InterviewIncludeFromInterviewRecursive4'


class FindManyInterviewArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InterviewOrderByInput', List['InterviewOrderByInput']]
    where: 'InterviewWhereInput'
    cursor: 'InterviewWhereUniqueInput'
    distinct: List['InterviewScalarFieldKeys']
    
    

class JobIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']


class JobIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']


class JobIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']


class JobIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']


class JobIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class JobArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyJobArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class ProfileIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']


class ProfileIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']


class ProfileIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']


class ProfileIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']


class ProfileIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    
    

class TokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']


class TokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']


class TokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']


class TokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']


class TokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUserRecursive1']
    Job: Union[bool, 'FindManyJobArgsFromUserRecursive1']
    Profile: Union[bool, 'FindManyProfileArgsFromUserRecursive1']
    Token: Union[bool, 'FindManyTokenArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUserRecursive2']
    Job: Union[bool, 'FindManyJobArgsFromUserRecursive2']
    Profile: Union[bool, 'FindManyProfileArgsFromUserRecursive2']
    Token: Union[bool, 'FindManyTokenArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUserRecursive3']
    Job: Union[bool, 'FindManyJobArgsFromUserRecursive3']
    Profile: Union[bool, 'FindManyProfileArgsFromUserRecursive3']
    Token: Union[bool, 'FindManyTokenArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Candidate: Union[bool, 'FindManyCandidateArgsFromUserRecursive4']
    Job: Union[bool, 'FindManyJobArgsFromUserRecursive4']
    Profile: Union[bool, 'FindManyProfileArgsFromUserRecursive4']
    Token: Union[bool, 'FindManyTokenArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    Job: 'JobListRelationFilter'
    Profile: 'ProfileListRelationFilter'
    Token: 'TokenListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    Job: 'JobListRelationFilter'
    Profile: 'ProfileListRelationFilter'
    Token: 'TokenListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    Job: 'JobListRelationFilter'
    Profile: 'ProfileListRelationFilter'
    Token: 'TokenListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    Job: 'JobListRelationFilter'
    Profile: 'ProfileListRelationFilter'
    Token: 'TokenListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Candidate: 'CandidateListRelationFilter'
    Job: 'JobListRelationFilter'
    Profile: 'ProfileListRelationFilter'
    Token: 'TokenListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    password: _str
    firstName: _str
    lastName: _str
    role: 'enums.Role'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    password: _str
    firstName: _str
    lastName: _str
    role: 'enums.Role'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    firstName: bool
    lastName: bool
    role: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    firstName: bool
    lastName: bool
    role: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'firstName': bool,
        'lastName': bool,
        'role': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'firstName': int,
        'lastName': int,
        'role': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'firstName',
    'lastName',
    'role',
    'createdAt',
    'updatedAt',
    'Candidate',
    'Job',
    'Profile',
    'Token',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'firstName',
    'lastName',
    'role',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'Candidate',
        'Job',
        'Profile',
        'Token',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields