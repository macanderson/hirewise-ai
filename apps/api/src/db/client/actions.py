# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class AssessmentActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Assessment]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Assessment.prisma().query_raw(
            'SELECT * FROM Assessment WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Assessment
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Assessment.prisma().query_first(
            'SELECT * FROM Assessment WHERE candidateId = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AssessmentCreateInput,
        include: Optional[types.AssessmentInclude] = None
    ) -> _PrismaModelT:
        """Create a new Assessment record.

        Parameters
        ----------
        data
            Assessment record data
        include
            Specifies which relations should be loaded on the returned Assessment model

        Returns
        -------
        prisma.models.Assessment
            The created Assessment record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Assessment record from just the required fields
        assessment = await Assessment.prisma().create(
            data={
                # data to create a Assessment record
                'id': 'ggciceaie',
                'candidateId': 'bbehjachib',
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AssessmentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Assessment records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Assessment record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Assessment.prisma().create_many(
            data=[
                {
                    # data to create a Assessment record
                    'id': 'cadfabfehe',
                    'candidateId': 'dgiiaaijj',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Assessment record
                    'id': 'bfaiacjjfc',
                    'candidateId': 'eigcfgbif',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AssessmentWhereUniqueInput,
        include: Optional[types.AssessmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Assessment record.

        Parameters
        ----------
        where
            Assessment filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Assessment model

        Returns
        -------
        prisma.models.Assessment
            The deleted Assessment record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assessment = await Assessment.prisma().delete(
            where={
                'id': 'bagcfbhiig',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AssessmentWhereUniqueInput,
        include: Optional[types.AssessmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Assessment record.

        Parameters
        ----------
        where
            Assessment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Assessment model

        Returns
        -------
        prisma.models.Assessment
            The found Assessment record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assessment = await Assessment.prisma().find_unique(
            where={
                'id': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AssessmentWhereUniqueInput,
        include: Optional[types.AssessmentInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Assessment record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Assessment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Assessment model

        Returns
        -------
        prisma.models.Assessment
            The found Assessment record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assessment = await Assessment.prisma().find_unique_or_raise(
            where={
                'id': 'biabhbdai',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssessmentWhereInput] = None,
        cursor: Optional[types.AssessmentWhereUniqueInput] = None,
        include: Optional[types.AssessmentInclude] = None,
        order: Optional[Union[types.AssessmentOrderByInput, List[types.AssessmentOrderByInput]]] = None,
        distinct: Optional[List[types.AssessmentScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Assessment records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Assessment records returned
        skip
            Ignore the first N results
        where
            Assessment filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assessment model
        order
            Order the returned Assessment records by any field
        distinct
            Filter Assessment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Assessment]
            The list of all Assessment records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Assessment records
        assessments = await Assessment.prisma().find_many(take=10)

        # find the first 5 Assessment records ordered by the score field
        assessments = await Assessment.prisma().find_many(
            take=5,
            order={
                'score': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AssessmentWhereInput] = None,
        cursor: Optional[types.AssessmentWhereUniqueInput] = None,
        include: Optional[types.AssessmentInclude] = None,
        order: Optional[Union[types.AssessmentOrderByInput, List[types.AssessmentOrderByInput]]] = None,
        distinct: Optional[List[types.AssessmentScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Assessment record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Assessment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assessment model
        order
            Order the returned Assessment records by any field
        distinct
            Filter Assessment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Assessment
            The first Assessment record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Assessment record ordered by the feedback field
        assessment = await Assessment.prisma().find_first(
            skip=1,
            order={
                'feedback': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AssessmentWhereInput] = None,
        cursor: Optional[types.AssessmentWhereUniqueInput] = None,
        include: Optional[types.AssessmentInclude] = None,
        order: Optional[Union[types.AssessmentOrderByInput, List[types.AssessmentOrderByInput]]] = None,
        distinct: Optional[List[types.AssessmentScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Assessment record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Assessment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assessment model
        order
            Order the returned Assessment records by any field
        distinct
            Filter Assessment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Assessment
            The first Assessment record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Assessment record ordered by the skills field
        assessment = await Assessment.prisma().find_first_or_raise(
            skip=1,
            order={
                'skills': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AssessmentUpdateInput,
        where: types.AssessmentWhereUniqueInput,
        include: Optional[types.AssessmentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Assessment record.

        Parameters
        ----------
        data
            Assessment record data specifying what to update
        where
            Assessment filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Assessment model

        Returns
        -------
        prisma.models.Assessment
            The updated Assessment record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        assessment = await Assessment.prisma().update(
            where={
                'id': 'idghgaicb',
            },
            data={
                # data to update the Assessment record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AssessmentWhereUniqueInput,
        data: types.AssessmentUpsertInput,
        include: Optional[types.AssessmentInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Assessment filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Assessment model

        Returns
        -------
        prisma.models.Assessment
            The created or updated Assessment record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assessment = await Assessment.prisma().upsert(
            where={
                'id': 'fjfddhigg',
            },
            data={
                'create': {
                    'id': 'fjfddhigg',
                    'candidateId': 'eigcfgbif',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'candidateId': 'eigcfgbif',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AssessmentUpdateManyMutationInput,
        where: types.AssessmentWhereInput,
    ) -> int:
        """Update multiple Assessment records

        Parameters
        ----------
        data
            Assessment data to update the selected Assessment records to
        where
            Filter to select the Assessment records to update

        Returns
        -------
        int
            The total number of Assessment records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Assessment records
        total = await Assessment.prisma().update_many(
            data={
                'createdAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssessmentWhereInput] = None,
        cursor: Optional[types.AssessmentWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Assessment records present in the database

        Parameters
        ----------
        select
            Select the Assessment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Assessment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AssessmentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Assessment.prisma().count()

        # results: prisma.types.AssessmentCountAggregateOutput
        results = await Assessment.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AssessmentCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssessmentWhereInput] = None,
        cursor: Optional[types.AssessmentWhereUniqueInput] = None,
    ) -> types.AssessmentCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AssessmentCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssessmentWhereInput] = None,
        cursor: Optional[types.AssessmentWhereUniqueInput] = None,
    ) -> Union[int, types.AssessmentCountAggregateOutput]:
        """Count the number of Assessment records present in the database

        Parameters
        ----------
        select
            Select the Assessment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Assessment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AssessmentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Assessment.prisma().count()

        # results: prisma.types.AssessmentCountAggregateOutput
        results = await Assessment.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AssessmentCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AssessmentWhereInput] = None
    ) -> int:
        """Delete multiple Assessment records.

        Parameters
        ----------
        where
            Optional Assessment filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Assessment records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Assessment records
        total = await Assessment.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AssessmentScalarFieldKeys'],
        *,
        where: Optional['types.AssessmentWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AssessmentAvgAggregateInput'] = None,
        sum: Optional['types.AssessmentSumAggregateInput'] = None,
        min: Optional['types.AssessmentMinAggregateInput'] = None,
        max: Optional['types.AssessmentMaxAggregateInput'] = None,
        having: Optional['types.AssessmentScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AssessmentCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AssessmentScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AssessmentScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AssessmentGroupByOutput']:
        """Group Assessment records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Assessment fields to group records by
        where
            Assessment filter to select records
        take
            Limit the maximum number of Assessment records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AssessmentGroupByOutput]
            A list of dictionaries representing the Assessment record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Assessment records by candidateId values
        # and count how many records are in each group
        results = await Assessment.prisma().group_by(
            ['candidateId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class CandidateActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Candidate]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Candidate.prisma().query_raw(
            'SELECT * FROM Candidate WHERE id = $1',
            'hjaecfifb',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Candidate
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Candidate.prisma().query_first(
            'SELECT * FROM Candidate WHERE name = $1',
            'cbbbjbfcii',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.CandidateCreateInput,
        include: Optional[types.CandidateInclude] = None
    ) -> _PrismaModelT:
        """Create a new Candidate record.

        Parameters
        ----------
        data
            Candidate record data
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The created Candidate record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Candidate record from just the required fields
        candidate = await Candidate.prisma().create(
            data={
                # data to create a Candidate record
                'id': 'bbejhfidcb',
                'name': 'bgeecijdgg',
                'email': 'bdiicjafbj',
                'jobId': 'bgehebiafc',
                'userId': 'bghffegacj',
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CandidateCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Candidate records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Candidate record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Candidate.prisma().create_many(
            data=[
                {
                    # data to create a Candidate record
                    'id': 'bhghchehcc',
                    'name': 'dcgchcbbf',
                    'email': 'bdedcabahc',
                    'jobId': 'ghfhiafcb',
                    'userId': 'heejgedji',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Candidate record
                    'id': 'bjgjgibgbf',
                    'name': 'bbbgbhfjge',
                    'email': 'igbehcbab',
                    'jobId': 'bdadaadhag',
                    'userId': 'bgiggdidbf',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CandidateWhereUniqueInput,
        include: Optional[types.CandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Candidate record.

        Parameters
        ----------
        where
            Candidate filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The deleted Candidate record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        candidate = await Candidate.prisma().delete(
            where={
                'id': 'caaaedabfc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.CandidateWhereUniqueInput,
        include: Optional[types.CandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Candidate record.

        Parameters
        ----------
        where
            Candidate filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The found Candidate record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        candidate = await Candidate.prisma().find_unique(
            where={
                'id': 'bigibebcib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.CandidateWhereUniqueInput,
        include: Optional[types.CandidateInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Candidate record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Candidate filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The found Candidate record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        candidate = await Candidate.prisma().find_unique_or_raise(
            where={
                'id': 'bigaiehgcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
        include: Optional[types.CandidateInclude] = None,
        order: Optional[Union[types.CandidateOrderByInput, List[types.CandidateOrderByInput]]] = None,
        distinct: Optional[List[types.CandidateScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Candidate records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Candidate records returned
        skip
            Ignore the first N results
        where
            Candidate filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Candidate model
        order
            Order the returned Candidate records by any field
        distinct
            Filter Candidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Candidate]
            The list of all Candidate records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Candidate records
        candidates = await Candidate.prisma().find_many(take=10)

        # find the first 5 Candidate records ordered by the email field
        candidates = await Candidate.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
        include: Optional[types.CandidateInclude] = None,
        order: Optional[Union[types.CandidateOrderByInput, List[types.CandidateOrderByInput]]] = None,
        distinct: Optional[List[types.CandidateScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Candidate record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Candidate filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Candidate model
        order
            Order the returned Candidate records by any field
        distinct
            Filter Candidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Candidate
            The first Candidate record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Candidate record ordered by the phone field
        candidate = await Candidate.prisma().find_first(
            skip=1,
            order={
                'phone': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
        include: Optional[types.CandidateInclude] = None,
        order: Optional[Union[types.CandidateOrderByInput, List[types.CandidateOrderByInput]]] = None,
        distinct: Optional[List[types.CandidateScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Candidate record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Candidate filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Candidate model
        order
            Order the returned Candidate records by any field
        distinct
            Filter Candidate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Candidate
            The first Candidate record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Candidate record ordered by the resume field
        candidate = await Candidate.prisma().find_first_or_raise(
            skip=1,
            order={
                'resume': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.CandidateUpdateInput,
        where: types.CandidateWhereUniqueInput,
        include: Optional[types.CandidateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Candidate record.

        Parameters
        ----------
        data
            Candidate record data specifying what to update
        where
            Candidate filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The updated Candidate record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        candidate = await Candidate.prisma().update(
            where={
                'id': 'beeifcbebf',
            },
            data={
                # data to update the Candidate record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.CandidateWhereUniqueInput,
        data: types.CandidateUpsertInput,
        include: Optional[types.CandidateInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Candidate filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Candidate model

        Returns
        -------
        prisma.models.Candidate
            The created or updated Candidate record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        candidate = await Candidate.prisma().upsert(
            where={
                'id': 'bgcigfahea',
            },
            data={
                'create': {
                    'id': 'bgcigfahea',
                    'name': 'bbbgbhfjge',
                    'email': 'igbehcbab',
                    'jobId': 'bdadaadhag',
                    'userId': 'bgiggdidbf',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'name': 'bbbgbhfjge',
                    'email': 'igbehcbab',
                    'jobId': 'bdadaadhag',
                    'userId': 'bgiggdidbf',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.CandidateUpdateManyMutationInput,
        where: types.CandidateWhereInput,
    ) -> int:
        """Update multiple Candidate records

        Parameters
        ----------
        data
            Candidate data to update the selected Candidate records to
        where
            Filter to select the Candidate records to update

        Returns
        -------
        int
            The total number of Candidate records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Candidate records
        total = await Candidate.prisma().update_many(
            data={
                'coverLetter': 'bcejgaggif'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Candidate records present in the database

        Parameters
        ----------
        select
            Select the Candidate fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Candidate filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CandidateCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Candidate.prisma().count()

        # results: prisma.types.CandidateCountAggregateOutput
        results = await Candidate.prisma().count(
            select={
                '_all': True,
                'status': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.CandidateCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
    ) -> types.CandidateCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.CandidateCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CandidateWhereInput] = None,
        cursor: Optional[types.CandidateWhereUniqueInput] = None,
    ) -> Union[int, types.CandidateCountAggregateOutput]:
        """Count the number of Candidate records present in the database

        Parameters
        ----------
        select
            Select the Candidate fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Candidate filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CandidateCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Candidate.prisma().count()

        # results: prisma.types.CandidateCountAggregateOutput
        results = await Candidate.prisma().count(
            select={
                '_all': True,
                'jobId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CandidateCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.CandidateWhereInput] = None
    ) -> int:
        """Delete multiple Candidate records.

        Parameters
        ----------
        where
            Optional Candidate filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Candidate records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Candidate records
        total = await Candidate.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.CandidateScalarFieldKeys'],
        *,
        where: Optional['types.CandidateWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CandidateAvgAggregateInput'] = None,
        sum: Optional['types.CandidateSumAggregateInput'] = None,
        min: Optional['types.CandidateMinAggregateInput'] = None,
        max: Optional['types.CandidateMaxAggregateInput'] = None,
        having: Optional['types.CandidateScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CandidateCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CandidateScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.CandidateScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.CandidateGroupByOutput']:
        """Group Candidate records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Candidate fields to group records by
        where
            Candidate filter to select records
        take
            Limit the maximum number of Candidate records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CandidateGroupByOutput]
            A list of dictionaries representing the Candidate record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Candidate records by userId values
        # and count how many records are in each group
        results = await Candidate.prisma().group_by(
            ['userId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class InterviewActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Interview]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Interview.prisma().query_raw(
            'SELECT * FROM Interview WHERE id = $1',
            'idfjadbcc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Interview
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Interview.prisma().query_first(
            'SELECT * FROM Interview WHERE candidateId = $1',
            'hgdhbjhhj',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.InterviewCreateInput,
        include: Optional[types.InterviewInclude] = None
    ) -> _PrismaModelT:
        """Create a new Interview record.

        Parameters
        ----------
        data
            Interview record data
        include
            Specifies which relations should be loaded on the returned Interview model

        Returns
        -------
        prisma.models.Interview
            The created Interview record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Interview record from just the required fields
        interview = await Interview.prisma().create(
            data={
                # data to create a Interview record
                'id': 'ecjjjfbae',
                'candidateId': 'bhhfibbigf',
                'scheduledAt': datetime.datetime.utcnow(),
                'duration': 893145566,
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.InterviewCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Interview records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Interview record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Interview.prisma().create_many(
            data=[
                {
                    # data to create a Interview record
                    'id': 'jjfeafhfj',
                    'candidateId': 'cbachdgfce',
                    'scheduledAt': datetime.datetime.utcnow(),
                    'duration': 271520213,
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Interview record
                    'id': 'efggddide',
                    'candidateId': 'caficfigfb',
                    'scheduledAt': datetime.datetime.utcnow(),
                    'duration': 1583689592,
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.InterviewWhereUniqueInput,
        include: Optional[types.InterviewInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Interview record.

        Parameters
        ----------
        where
            Interview filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Interview model

        Returns
        -------
        prisma.models.Interview
            The deleted Interview record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        interview = await Interview.prisma().delete(
            where={
                'id': 'ihieecagf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.InterviewWhereUniqueInput,
        include: Optional[types.InterviewInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Interview record.

        Parameters
        ----------
        where
            Interview filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Interview model

        Returns
        -------
        prisma.models.Interview
            The found Interview record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        interview = await Interview.prisma().find_unique(
            where={
                'id': 'bghfciaafe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.InterviewWhereUniqueInput,
        include: Optional[types.InterviewInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Interview record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Interview filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Interview model

        Returns
        -------
        prisma.models.Interview
            The found Interview record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        interview = await Interview.prisma().find_unique_or_raise(
            where={
                'id': 'bgchfhgceh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.InterviewWhereInput] = None,
        cursor: Optional[types.InterviewWhereUniqueInput] = None,
        include: Optional[types.InterviewInclude] = None,
        order: Optional[Union[types.InterviewOrderByInput, List[types.InterviewOrderByInput]]] = None,
        distinct: Optional[List[types.InterviewScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Interview records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Interview records returned
        skip
            Ignore the first N results
        where
            Interview filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Interview model
        order
            Order the returned Interview records by any field
        distinct
            Filter Interview records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Interview]
            The list of all Interview records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Interview records
        interviews = await Interview.prisma().find_many(take=10)

        # find the first 5 Interview records ordered by the scheduledAt field
        interviews = await Interview.prisma().find_many(
            take=5,
            order={
                'scheduledAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.InterviewWhereInput] = None,
        cursor: Optional[types.InterviewWhereUniqueInput] = None,
        include: Optional[types.InterviewInclude] = None,
        order: Optional[Union[types.InterviewOrderByInput, List[types.InterviewOrderByInput]]] = None,
        distinct: Optional[List[types.InterviewScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Interview record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Interview filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Interview model
        order
            Order the returned Interview records by any field
        distinct
            Filter Interview records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Interview
            The first Interview record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Interview record ordered by the duration field
        interview = await Interview.prisma().find_first(
            skip=1,
            order={
                'duration': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.InterviewWhereInput] = None,
        cursor: Optional[types.InterviewWhereUniqueInput] = None,
        include: Optional[types.InterviewInclude] = None,
        order: Optional[Union[types.InterviewOrderByInput, List[types.InterviewOrderByInput]]] = None,
        distinct: Optional[List[types.InterviewScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Interview record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Interview filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Interview model
        order
            Order the returned Interview records by any field
        distinct
            Filter Interview records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Interview
            The first Interview record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Interview record ordered by the type field
        interview = await Interview.prisma().find_first_or_raise(
            skip=1,
            order={
                'type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.InterviewUpdateInput,
        where: types.InterviewWhereUniqueInput,
        include: Optional[types.InterviewInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Interview record.

        Parameters
        ----------
        data
            Interview record data specifying what to update
        where
            Interview filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Interview model

        Returns
        -------
        prisma.models.Interview
            The updated Interview record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        interview = await Interview.prisma().update(
            where={
                'id': 'cafeiaccbc',
            },
            data={
                # data to update the Interview record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.InterviewWhereUniqueInput,
        data: types.InterviewUpsertInput,
        include: Optional[types.InterviewInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Interview filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Interview model

        Returns
        -------
        prisma.models.Interview
            The created or updated Interview record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        interview = await Interview.prisma().upsert(
            where={
                'id': 'gaddfhfh',
            },
            data={
                'create': {
                    'id': 'gaddfhfh',
                    'candidateId': 'caficfigfb',
                    'scheduledAt': datetime.datetime.utcnow(),
                    'duration': 1583689592,
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'candidateId': 'caficfigfb',
                    'scheduledAt': datetime.datetime.utcnow(),
                    'duration': 1583689592,
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.InterviewUpdateManyMutationInput,
        where: types.InterviewWhereInput,
    ) -> int:
        """Update multiple Interview records

        Parameters
        ----------
        data
            Interview data to update the selected Interview records to
        where
            Filter to select the Interview records to update

        Returns
        -------
        int
            The total number of Interview records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Interview records
        total = await Interview.prisma().update_many(
            data={
                'notes': 'gieegcbeg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.InterviewWhereInput] = None,
        cursor: Optional[types.InterviewWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Interview records present in the database

        Parameters
        ----------
        select
            Select the Interview fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Interview filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.InterviewCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Interview.prisma().count()

        # results: prisma.types.InterviewCountAggregateOutput
        results = await Interview.prisma().count(
            select={
                '_all': True,
                'status': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.InterviewCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.InterviewWhereInput] = None,
        cursor: Optional[types.InterviewWhereUniqueInput] = None,
    ) -> types.InterviewCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.InterviewCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.InterviewWhereInput] = None,
        cursor: Optional[types.InterviewWhereUniqueInput] = None,
    ) -> Union[int, types.InterviewCountAggregateOutput]:
        """Count the number of Interview records present in the database

        Parameters
        ----------
        select
            Select the Interview fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Interview filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.InterviewCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Interview.prisma().count()

        # results: prisma.types.InterviewCountAggregateOutput
        results = await Interview.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.InterviewCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.InterviewWhereInput] = None
    ) -> int:
        """Delete multiple Interview records.

        Parameters
        ----------
        where
            Optional Interview filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Interview records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Interview records
        total = await Interview.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.InterviewScalarFieldKeys'],
        *,
        where: Optional['types.InterviewWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.InterviewAvgAggregateInput'] = None,
        sum: Optional['types.InterviewSumAggregateInput'] = None,
        min: Optional['types.InterviewMinAggregateInput'] = None,
        max: Optional['types.InterviewMaxAggregateInput'] = None,
        having: Optional['types.InterviewScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.InterviewCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.InterviewScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.InterviewScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.InterviewGroupByOutput']:
        """Group Interview records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Interview fields to group records by
        where
            Interview filter to select records
        take
            Limit the maximum number of Interview records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.InterviewGroupByOutput]
            A list of dictionaries representing the Interview record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Interview records by updatedAt values
        # and count how many records are in each group
        results = await Interview.prisma().group_by(
            ['updatedAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class JobActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Job]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Job.prisma().query_raw(
            'SELECT * FROM Job WHERE id = $1',
            'bgcffadich',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Job
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Job.prisma().query_first(
            'SELECT * FROM Job WHERE title = $1',
            'fcbichhci',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.JobCreateInput,
        include: Optional[types.JobInclude] = None
    ) -> _PrismaModelT:
        """Create a new Job record.

        Parameters
        ----------
        data
            Job record data
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The created Job record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Job record from just the required fields
        job = await Job.prisma().create(
            data={
                # data to create a Job record
                'id': 'bcggadccgf',
                'title': 'jdcfdcgc',
                'description': 'cafdaehjid',
                'company': 'gifdddbia',
                'userId': 'bchehecef',
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.JobCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Job records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Job record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Job.prisma().create_many(
            data=[
                {
                    # data to create a Job record
                    'id': 'jeijcbhfe',
                    'title': 'bjgejjabff',
                    'description': 'bcciijbibg',
                    'company': 'cffcachfd',
                    'userId': 'bccdfhdigc',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Job record
                    'id': 'febcgjbfj',
                    'title': 'bageiegghg',
                    'description': 'faidicegb',
                    'company': 'bacecgfhbe',
                    'userId': 'ihcahiead',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.JobWhereUniqueInput,
        include: Optional[types.JobInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Job record.

        Parameters
        ----------
        where
            Job filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The deleted Job record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        job = await Job.prisma().delete(
            where={
                'id': 'biheheiajg',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.JobWhereUniqueInput,
        include: Optional[types.JobInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Job record.

        Parameters
        ----------
        where
            Job filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The found Job record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        job = await Job.prisma().find_unique(
            where={
                'id': 'jbgijghgb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.JobWhereUniqueInput,
        include: Optional[types.JobInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Job record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Job filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The found Job record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        job = await Job.prisma().find_unique_or_raise(
            where={
                'id': 'hgjcghfbi',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
        include: Optional[types.JobInclude] = None,
        order: Optional[Union[types.JobOrderByInput, List[types.JobOrderByInput]]] = None,
        distinct: Optional[List[types.JobScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Job records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Job records returned
        skip
            Ignore the first N results
        where
            Job filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Job model
        order
            Order the returned Job records by any field
        distinct
            Filter Job records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Job]
            The list of all Job records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Job records
        jobs = await Job.prisma().find_many(take=10)

        # find the first 5 Job records ordered by the description field
        jobs = await Job.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
        include: Optional[types.JobInclude] = None,
        order: Optional[Union[types.JobOrderByInput, List[types.JobOrderByInput]]] = None,
        distinct: Optional[List[types.JobScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Job record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Job filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Job model
        order
            Order the returned Job records by any field
        distinct
            Filter Job records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Job
            The first Job record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Job record ordered by the company field
        job = await Job.prisma().find_first(
            skip=1,
            order={
                'company': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
        include: Optional[types.JobInclude] = None,
        order: Optional[Union[types.JobOrderByInput, List[types.JobOrderByInput]]] = None,
        distinct: Optional[List[types.JobScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Job record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Job filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Job model
        order
            Order the returned Job records by any field
        distinct
            Filter Job records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Job
            The first Job record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Job record ordered by the location field
        job = await Job.prisma().find_first_or_raise(
            skip=1,
            order={
                'location': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.JobUpdateInput,
        where: types.JobWhereUniqueInput,
        include: Optional[types.JobInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Job record.

        Parameters
        ----------
        data
            Job record data specifying what to update
        where
            Job filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The updated Job record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        job = await Job.prisma().update(
            where={
                'id': 'icadbcehj',
            },
            data={
                # data to update the Job record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.JobWhereUniqueInput,
        data: types.JobUpsertInput,
        include: Optional[types.JobInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Job filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Job model

        Returns
        -------
        prisma.models.Job
            The created or updated Job record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        job = await Job.prisma().upsert(
            where={
                'id': 'jchciaee',
            },
            data={
                'create': {
                    'id': 'jchciaee',
                    'title': 'bageiegghg',
                    'description': 'faidicegb',
                    'company': 'bacecgfhbe',
                    'userId': 'ihcahiead',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'title': 'bageiegghg',
                    'description': 'faidicegb',
                    'company': 'bacecgfhbe',
                    'userId': 'ihcahiead',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.JobUpdateManyMutationInput,
        where: types.JobWhereInput,
    ) -> int:
        """Update multiple Job records

        Parameters
        ----------
        data
            Job data to update the selected Job records to
        where
            Filter to select the Job records to update

        Returns
        -------
        int
            The total number of Job records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Job records
        total = await Job.prisma().update_many(
            data={
                'salary': 'deeificjd'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Job records present in the database

        Parameters
        ----------
        select
            Select the Job fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Job filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.JobCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Job.prisma().count()

        # results: prisma.types.JobCountAggregateOutput
        results = await Job.prisma().count(
            select={
                '_all': True,
                'type': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.JobCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
    ) -> types.JobCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.JobCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.JobWhereInput] = None,
        cursor: Optional[types.JobWhereUniqueInput] = None,
    ) -> Union[int, types.JobCountAggregateOutput]:
        """Count the number of Job records present in the database

        Parameters
        ----------
        select
            Select the Job fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Job filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.JobCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Job.prisma().count()

        # results: prisma.types.JobCountAggregateOutput
        results = await Job.prisma().count(
            select={
                '_all': True,
                'status': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.JobCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.JobWhereInput] = None
    ) -> int:
        """Delete multiple Job records.

        Parameters
        ----------
        where
            Optional Job filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Job records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Job records
        total = await Job.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.JobScalarFieldKeys'],
        *,
        where: Optional['types.JobWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.JobAvgAggregateInput'] = None,
        sum: Optional['types.JobSumAggregateInput'] = None,
        min: Optional['types.JobMinAggregateInput'] = None,
        max: Optional['types.JobMaxAggregateInput'] = None,
        having: Optional['types.JobScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.JobCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.JobScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.JobScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.JobGroupByOutput']:
        """Group Job records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Job fields to group records by
        where
            Job filter to select records
        take
            Limit the maximum number of Job records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.JobGroupByOutput]
            A list of dictionaries representing the Job record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Job records by userId values
        # and count how many records are in each group
        results = await Job.prisma().group_by(
            ['userId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ProfileActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Profile]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Profile.prisma().query_raw(
            'SELECT * FROM Profile WHERE id = $1',
            'bbcbhebbda',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Profile
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Profile.prisma().query_first(
            'SELECT * FROM Profile WHERE userId = $1',
            'bejfijgcfb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ProfileCreateInput,
        include: Optional[types.ProfileInclude] = None
    ) -> _PrismaModelT:
        """Create a new Profile record.

        Parameters
        ----------
        data
            Profile record data
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The created Profile record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Profile record from just the required fields
        profile = await Profile.prisma().create(
            data={
                # data to create a Profile record
                'id': 'caifcbgii',
                'userId': 'igaibbfgj',
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ProfileCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Profile records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Profile record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Profile.prisma().create_many(
            data=[
                {
                    # data to create a Profile record
                    'id': 'bggajdcbbi',
                    'userId': 'fcfhgbjed',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Profile record
                    'id': 'hdgcajhjg',
                    'userId': 'ejdjahicb',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Profile record.

        Parameters
        ----------
        where
            Profile filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The deleted Profile record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = await Profile.prisma().delete(
            where={
                'id': 'gdjgigfgc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Profile record.

        Parameters
        ----------
        where
            Profile filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The found Profile record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = await Profile.prisma().find_unique(
            where={
                'id': 'gfeaahdeh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Profile record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Profile filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The found Profile record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = await Profile.prisma().find_unique_or_raise(
            where={
                'id': 'bjafcgbffc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Profile records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Profile records returned
        skip
            Ignore the first N results
        where
            Profile filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Profile]
            The list of all Profile records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Profile records
        profiles = await Profile.prisma().find_many(take=10)

        # find the first 5 Profile records ordered by the title field
        profiles = await Profile.prisma().find_many(
            take=5,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Profile record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Profile filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Profile
            The first Profile record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Profile record ordered by the company field
        profile = await Profile.prisma().find_first(
            skip=1,
            order={
                'company': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Profile record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Profile filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Profile
            The first Profile record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Profile record ordered by the bio field
        profile = await Profile.prisma().find_first_or_raise(
            skip=1,
            order={
                'bio': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ProfileUpdateInput,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Profile record.

        Parameters
        ----------
        data
            Profile record data specifying what to update
        where
            Profile filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The updated Profile record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        profile = await Profile.prisma().update(
            where={
                'id': 'hihegjif',
            },
            data={
                # data to update the Profile record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ProfileWhereUniqueInput,
        data: types.ProfileUpsertInput,
        include: Optional[types.ProfileInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Profile filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The created or updated Profile record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = await Profile.prisma().upsert(
            where={
                'id': 'bdjidcidac',
            },
            data={
                'create': {
                    'id': 'bdjidcidac',
                    'userId': 'ejdjahicb',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'userId': 'ejdjahicb',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ProfileUpdateManyMutationInput,
        where: types.ProfileWhereInput,
    ) -> int:
        """Update multiple Profile records

        Parameters
        ----------
        data
            Profile data to update the selected Profile records to
        where
            Filter to select the Profile records to update

        Returns
        -------
        int
            The total number of Profile records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Profile records
        total = await Profile.prisma().update_many(
            data={
                'avatar': 'ifgaaagff'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Profile records present in the database

        Parameters
        ----------
        select
            Select the Profile fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Profile filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProfileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Profile.prisma().count()

        # results: prisma.types.ProfileCountAggregateOutput
        results = await Profile.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ProfileCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> types.ProfileCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ProfileCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> Union[int, types.ProfileCountAggregateOutput]:
        """Count the number of Profile records present in the database

        Parameters
        ----------
        select
            Select the Profile fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Profile filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProfileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Profile.prisma().count()

        # results: prisma.types.ProfileCountAggregateOutput
        results = await Profile.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProfileCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ProfileWhereInput] = None
    ) -> int:
        """Delete multiple Profile records.

        Parameters
        ----------
        where
            Optional Profile filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Profile records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Profile records
        total = await Profile.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ProfileScalarFieldKeys'],
        *,
        where: Optional['types.ProfileWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProfileAvgAggregateInput'] = None,
        sum: Optional['types.ProfileSumAggregateInput'] = None,
        min: Optional['types.ProfileMinAggregateInput'] = None,
        max: Optional['types.ProfileMaxAggregateInput'] = None,
        having: Optional['types.ProfileScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProfileCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProfileScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ProfileScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ProfileGroupByOutput']:
        """Group Profile records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Profile fields to group records by
        where
            Profile filter to select records
        take
            Limit the maximum number of Profile records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProfileGroupByOutput]
            A list of dictionaries representing the Profile record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Profile records by id values
        # and count how many records are in each group
        results = await Profile.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class TokenActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Token]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Token.prisma().query_raw(
            'SELECT * FROM Token WHERE id = $1',
            'befcddgjce',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Token
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Token.prisma().query_first(
            'SELECT * FROM Token WHERE token = $1',
            'bfhdbjjgfd',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.TokenCreateInput,
        include: Optional[types.TokenInclude] = None
    ) -> _PrismaModelT:
        """Create a new Token record.

        Parameters
        ----------
        data
            Token record data
        include
            Specifies which relations should be loaded on the returned Token model

        Returns
        -------
        prisma.models.Token
            The created Token record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Token record from just the required fields
        token = await Token.prisma().create(
            data={
                # data to create a Token record
                'id': 'cabdjadaji',
                'token': 'faajgfadf',
                'userId': 'biaagcedjc',
                'expiresAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.TokenCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Token records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Token record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Token.prisma().create_many(
            data=[
                {
                    # data to create a Token record
                    'id': 'cahhaghecf',
                    'token': 'bghcbbcidi',
                    'userId': 'jcgghhgdj',
                    'expiresAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Token record
                    'id': 'beehgcebbg',
                    'token': 'bhdiaidiaf',
                    'userId': 'deajegcfi',
                    'expiresAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.TokenWhereUniqueInput,
        include: Optional[types.TokenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Token record.

        Parameters
        ----------
        where
            Token filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Token model

        Returns
        -------
        prisma.models.Token
            The deleted Token record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        token = await Token.prisma().delete(
            where={
                'id': 'gabahhhjf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.TokenWhereUniqueInput,
        include: Optional[types.TokenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Token record.

        Parameters
        ----------
        where
            Token filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Token model

        Returns
        -------
        prisma.models.Token
            The found Token record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        token = await Token.prisma().find_unique(
            where={
                'id': 'cjagadcjg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.TokenWhereUniqueInput,
        include: Optional[types.TokenInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Token record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Token filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Token model

        Returns
        -------
        prisma.models.Token
            The found Token record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        token = await Token.prisma().find_unique_or_raise(
            where={
                'id': 'bifficggej',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TokenWhereInput] = None,
        cursor: Optional[types.TokenWhereUniqueInput] = None,
        include: Optional[types.TokenInclude] = None,
        order: Optional[Union[types.TokenOrderByInput, List[types.TokenOrderByInput]]] = None,
        distinct: Optional[List[types.TokenScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Token records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Token records returned
        skip
            Ignore the first N results
        where
            Token filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Token model
        order
            Order the returned Token records by any field
        distinct
            Filter Token records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Token]
            The list of all Token records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Token records
        tokens = await Token.prisma().find_many(take=10)

        # find the first 5 Token records ordered by the userId field
        tokens = await Token.prisma().find_many(
            take=5,
            order={
                'userId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TokenWhereInput] = None,
        cursor: Optional[types.TokenWhereUniqueInput] = None,
        include: Optional[types.TokenInclude] = None,
        order: Optional[Union[types.TokenOrderByInput, List[types.TokenOrderByInput]]] = None,
        distinct: Optional[List[types.TokenScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Token record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Token filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Token model
        order
            Order the returned Token records by any field
        distinct
            Filter Token records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Token
            The first Token record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Token record ordered by the expiresAt field
        token = await Token.prisma().find_first(
            skip=1,
            order={
                'expiresAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TokenWhereInput] = None,
        cursor: Optional[types.TokenWhereUniqueInput] = None,
        include: Optional[types.TokenInclude] = None,
        order: Optional[Union[types.TokenOrderByInput, List[types.TokenOrderByInput]]] = None,
        distinct: Optional[List[types.TokenScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Token record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Token filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Token model
        order
            Order the returned Token records by any field
        distinct
            Filter Token records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Token
            The first Token record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Token record ordered by the createdAt field
        token = await Token.prisma().find_first_or_raise(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.TokenUpdateInput,
        where: types.TokenWhereUniqueInput,
        include: Optional[types.TokenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Token record.

        Parameters
        ----------
        data
            Token record data specifying what to update
        where
            Token filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Token model

        Returns
        -------
        prisma.models.Token
            The updated Token record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        token = await Token.prisma().update(
            where={
                'id': 'bgbbaajbic',
            },
            data={
                # data to update the Token record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.TokenWhereUniqueInput,
        data: types.TokenUpsertInput,
        include: Optional[types.TokenInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Token filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Token model

        Returns
        -------
        prisma.models.Token
            The created or updated Token record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        token = await Token.prisma().upsert(
            where={
                'id': 'eegghdhjb',
            },
            data={
                'create': {
                    'id': 'eegghdhjb',
                    'token': 'bhdiaidiaf',
                    'userId': 'deajegcfi',
                    'expiresAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'token': 'bhdiaidiaf',
                    'userId': 'deajegcfi',
                    'expiresAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.TokenUpdateManyMutationInput,
        where: types.TokenWhereInput,
    ) -> int:
        """Update multiple Token records

        Parameters
        ----------
        data
            Token data to update the selected Token records to
        where
            Filter to select the Token records to update

        Returns
        -------
        int
            The total number of Token records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Token records
        total = await Token.prisma().update_many(
            data={
                'id': 'daafgidjg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TokenWhereInput] = None,
        cursor: Optional[types.TokenWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Token records present in the database

        Parameters
        ----------
        select
            Select the Token fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Token filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TokenCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Token.prisma().count()

        # results: prisma.types.TokenCountAggregateOutput
        results = await Token.prisma().count(
            select={
                '_all': True,
                'token': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.TokenCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TokenWhereInput] = None,
        cursor: Optional[types.TokenWhereUniqueInput] = None,
    ) -> types.TokenCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.TokenCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TokenWhereInput] = None,
        cursor: Optional[types.TokenWhereUniqueInput] = None,
    ) -> Union[int, types.TokenCountAggregateOutput]:
        """Count the number of Token records present in the database

        Parameters
        ----------
        select
            Select the Token fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Token filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TokenCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Token.prisma().count()

        # results: prisma.types.TokenCountAggregateOutput
        results = await Token.prisma().count(
            select={
                '_all': True,
                'userId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.TokenCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.TokenWhereInput] = None
    ) -> int:
        """Delete multiple Token records.

        Parameters
        ----------
        where
            Optional Token filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Token records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Token records
        total = await Token.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.TokenScalarFieldKeys'],
        *,
        where: Optional['types.TokenWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.TokenAvgAggregateInput'] = None,
        sum: Optional['types.TokenSumAggregateInput'] = None,
        min: Optional['types.TokenMinAggregateInput'] = None,
        max: Optional['types.TokenMaxAggregateInput'] = None,
        having: Optional['types.TokenScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.TokenCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.TokenScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.TokenScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.TokenGroupByOutput']:
        """Group Token records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Token fields to group records by
        where
            Token filter to select records
        take
            Limit the maximum number of Token records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.TokenGroupByOutput]
            A list of dictionaries representing the Token record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Token records by expiresAt values
        # and count how many records are in each group
        results = await Token.prisma().group_by(
            ['expiresAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            'gdcgcgagj',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE email = $1',
            'bhceabbgja',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'id': 'ehabfhegh',
                'email': 'bcajcajjbc',
                'password': 'bfdgheeegf',
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'id': 'ececbijji',
                    'email': 'cbcfgdcdhf',
                    'password': 'fdgjfbhia',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a User record
                    'id': 'jcehcdchh',
                    'email': 'bgcbjdhjcc',
                    'password': 'bieiidcabj',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 'bjcbfcieaa',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 'cbaaechiej',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'id': 'iejbeaaeg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the password field
        users = await User.prisma().find_many(
            take=5,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the firstName field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'firstName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the lastName field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'lastName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 'jcibfcbhf',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 'chdadcaga',
            },
            data={
                'create': {
                    'id': 'chdadcaga',
                    'email': 'bgcbjdhjcc',
                    'password': 'bieiidcabj',
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'email': 'bgcbjdhjcc',
                    'password': 'bieiidcabj',
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'role': enums.Role.USER
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by id values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models