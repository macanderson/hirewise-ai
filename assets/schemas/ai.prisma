model Agent {
    id          String          @id @default(uuid())
    name        String
    description String?
    tenant_id   String
    visibility  AgentVisibility @default(PUBLIC)
    created_at  Int
    updated_at  Int
    deleted_at  Int?
    created_by  String
    updated_by  String
    deleted_by  String?

    // Relations
    tenant        Tenant        @relation(fields: [tenant_id], references: [id])
    creator       User          @relation("AgentCreatedBy", fields: [created_by], references: [id])
    updater       User          @relation("AgentUpdatedBy", fields: [updated_by], references: [id])
    documents     Document[]
    crawlers      Crawler[]
    chat_sessions ChatSession[]
    agent_users   AgentUser[]

    @@map("agents")
    @@schema("ai")
}

model Document {
    id           String  @id @default(uuid())
    title        String
    description  String?
    agent_id     String
    source_url   String?
    file_path    String?
    content_type String
    created_at   Int
    updated_at   Int
    deleted_at   Int?
    created_by   String
    updated_by   String
    deleted_by   String?

    // Relations
    agent   Agent           @relation(fields: [agent_id], references: [id], onDelete: Cascade)
    creator User            @relation("DocumentCreatedBy", fields: [created_by], references: [id])
    updater User            @relation("DocumentUpdatedBy", fields: [updated_by], references: [id])
    chunks  DocumentChunk[]

    @@map("documents")
    @@schema("ai")
}

model DocumentChunk {
    id          String  @id @default(uuid())
    document_id String
    content     String
    metadata    Json
    embedding   Float[]
    created_at  Int
    updated_at  Int
    deleted_at  Int?
    created_by  String
    updated_by  String
    deleted_by  String?

    // Relations
    document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
    creator  User     @relation("ChunkCreatedBy", fields: [created_by], references: [id])
    updater  User     @relation("ChunkUpdatedBy", fields: [updated_by], references: [id])

    @@map("document_chunks")
    @@schema("ai")
}

model Crawler {
    id         String       @id @default(uuid())
    agent_id   String
    url        String
    scope      CrawlerScope @default(SINGLE_PAGE)
    max_depth  Int          @default(1)
    created_at Int
    updated_at Int
    deleted_at Int?
    created_by String
    updated_by String
    deleted_by String?

    // Relations
    agent   Agent @relation(fields: [agent_id], references: [id], onDelete: Cascade)
    creator User  @relation("CrawlerCreatedBy", fields: [created_by], references: [id])
    updater User  @relation("CrawlerUpdatedBy", fields: [updated_by], references: [id])

    @@map("crawlers")
    @@schema("ai")
}

model ChatSession {
    id         String  @id @default(uuid())
    user_id    String
    agent_id   String
    title      String?
    created_at Int
    updated_at Int
    deleted_at Int?
    created_by String
    updated_by String
    deleted_by String?

    // Relations
    user     User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
    agent    Agent         @relation(fields: [agent_id], references: [id], onDelete: Cascade)
    creator  User          @relation("ChatSessionCreatedBy", fields: [created_by], references: [id])
    updater  User          @relation("ChatSessionUpdatedBy", fields: [updated_by], references: [id])
    messages ChatMessage[]

    @@map("chat_sessions")
    @@schema("ai")
}

model ChatMessage {
    id              String  @id @default(uuid())
    chat_session_id String
    role            String
    content         String
    created_at      Int
    updated_at      Int
    deleted_at      Int?
    created_by      String
    updated_by      String
    deleted_by      String?

    // Relations
    chat_session ChatSession @relation(fields: [chat_session_id], references: [id], onDelete: Cascade)
    creator      User        @relation("ChatMessageCreatedBy", fields: [created_by], references: [id])
    updater      User        @relation("ChatMessageUpdatedBy", fields: [updated_by], references: [id])

    @@map("chat_messages")
    @@schema("ai")
}

model AgentUser {
    id         String  @id @default(uuid())
    agent_id   String
    user_id    String
    created_at Int
    updated_at Int
    deleted_at Int?
    created_by String
    updated_by String
    deleted_by String?

    // Relations
    agent   Agent @relation(fields: [agent_id], references: [id], onDelete: Cascade)
    user    User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
    creator User  @relation("AgentUserCreatedBy", fields: [created_by], references: [id])
    updater User  @relation("AgentUserUpdatedBy", fields: [updated_by], references: [id])

    @@unique([agent_id, user_id])
    @@map("agent_users")
    @@schema("ai")
}

enum AgentVisibility {
    PUBLIC
    PRIVATE

    @@schema("ai")
}

enum CrawlerScope {
    SINGLE_PAGE
    DOMAIN
    SUBDOMAIN
    PATH

    @@schema("ai")
}
