// User management with roles
model User {
    id            String  @id @default(uuid())
    email         String
    password_hash String?
    first_name    String?
    last_name     String?
    tenant_id     String
    role_id       String?
    created_at    Int
    updated_at    Int
    deleted_at    Int?
    created_by    String?
    updated_by    String?
    deleted_by    String?

    // Relations
    tenant            Tenant              @relation(fields: [tenant_id], references: [id])
    role              UserRole?           @relation(fields: [role_id], references: [id])
    sessions          UserSession[]
    Agent             Agent[]
    Agent             Agent[]
    Document          Document[]
    Document          Document[]
    DocumentChunk     DocumentChunk[]
    DocumentChunk     DocumentChunk[]
    Crawler           Crawler[]
    Crawler           Crawler[]
    ChatSession       ChatSession[]
    ChatSession       ChatSession[]
    ChatSession       ChatSession[]
    ChatMessage       ChatMessage[]
    ChatMessage       ChatMessage[]
    AgentUser         AgentUser[]
    AgentUser         AgentUser[]
    AgentUser         AgentUser[]
    Project           Project[]
    Project           Project[]
    Company           Company[]
    Company           Company[]
    Position          Position[]
    Position          Position[]
    Candidate         Candidate[]
    Candidate         Candidate[]
    PositionCandidate PositionCandidate[]
    PositionCandidate PositionCandidate[]
    MessageThread     MessageThread[]
    MessageThread     MessageThread[]
    Message           Message[]
    Message           Message[]

    @@unique([email, tenant_id])
    @@map("users")
    @@schema("auth")
}

model UserRole {
    id          String   @id @default(uuid())
    name        String
    type        RoleType
    permissions Json
    created_at  Int
    updated_at  Int
    deleted_at  Int?
    created_by  String?
    updated_by  String?
    deleted_by  String?

    // Relations
    users User[]

    @@map("user_roles")
    @@schema("auth")
}

model UserSession {
    id         String   @id @default(uuid())
    user_id    String
    token      String   @unique
    expires_at DateTime
    ip_address String?
    user_agent String?
    created_at Int
    updated_at Int
    deleted_at Int?
    created_by String?
    updated_by String?
    deleted_by String?

    // Relations
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@map("user_sessions")
    @@schema("auth")
}

enum RoleType {
    BUSINESS_ADMIN
    BUSINESS_USER
    CUSTOMER_ADMIN
    CUSTOMER_USER

    @@map("role_type")
    @@schema("auth")
}
