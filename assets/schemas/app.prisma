// Project and position management
model Project {
    id          String  @id @default(uuid())
    name        String
    description String?
    tenant_id   String
    company_id  String
    created_at  Int
    updated_at  Int
    deleted_at  Int?
    created_by  String
    updated_by  String
    deleted_by  String?

    // Relations
    tenant    Tenant     @relation(fields: [tenant_id], references: [id])
    company   Company    @relation(fields: [company_id], references: [id])
    creator   User       @relation("ProjectCreatedBy", fields: [created_by], references: [id])
    updater   User       @relation("ProjectUpdatedBy", fields: [updated_by], references: [id])
    positions Position[]

    @@map("projects")
    @@schema("app")
}

// Company management
model Company {
    id          String  @id @default(uuid())
    name        String
    description String?
    logo_url    String?
    website     String?
    tenant_id   String
    created_at  Int
    updated_at  Int
    deleted_at  Int?
    created_by  String
    updated_by  String
    deleted_by  String?

    // Relations
    tenant    Tenant     @relation(fields: [tenant_id], references: [id])
    creator   User       @relation("CompanyCreatedBy", fields: [created_by], references: [id])
    updater   User       @relation("CompanyUpdatedBy", fields: [updated_by], references: [id])
    projects  Project[]
    positions Position[]

    @@map("companies")
    @@schema("app")
}

// Position and candidate management
model Position {
    id           String         @id @default(uuid())
    title        String
    description  String?
    project_id   String
    company_id   String
    requirements String[]
    keywords     String[]
    location     String?
    type         String?
    salary_range String?
    department   String?
    status       PositionStatus @default(DRAFT)
    tenant_id    String
    created_at   Int
    updated_at   Int
    deleted_at   Int?
    created_by   String
    updated_by   String
    deleted_by   String?

    // Relations
    tenant     Tenant              @relation(fields: [tenant_id], references: [id])
    project    Project             @relation(fields: [project_id], references: [id])
    company    Company             @relation(fields: [company_id], references: [id])
    creator    User                @relation("PositionCreatedBy", fields: [created_by], references: [id])
    updater    User                @relation("PositionUpdatedBy", fields: [updated_by], references: [id])
    candidates PositionCandidate[]

    @@map("positions")
    @@schema("app")
}

model Candidate {
    id                  String          @id @default(uuid())
    first_name          String
    last_name           String
    email               String
    phone               String?
    resume_url          String?
    linkedin_url        String?
    current_title       String?
    current_company     String?
    career_level        CareerLevel     @default(ENTRY)
    years_of_experience Int?
    education_level     EducationLevel
    skills              String[]
    languages           String[]
    location            String?
    current_salary      Float?
    expected_salary     Float?
    currency            String          @default("USD")
    notice_period       Int             @default(14)
    notice_period_unit  String          @default("days")
    visa_status         String?
    immigration_status  String?
    immigration_country String?
    status              CandidateStatus @default(ACTIVE)
    source              CandidateSource @default(LINKEDIN)
    notes               String?
    tenant_id           String?
    created_at          Int
    updated_at          Int
    deleted_at          Int?
    created_by          String
    updated_by          String
    deleted_by          String?

    // Relations
    tenant         Tenant?             @relation(fields: [tenant_id], references: [id])
    creator        User                @relation("CandidateCreatedBy", fields: [created_by], references: [id])
    updater        User                @relation("CandidateUpdatedBy", fields: [updated_by], references: [id])
    positions      PositionCandidate[]
    messages       Message[]           @relation("CandidateMessages")
    messageThreads MessageThread[]     @relation("CandidateThreads")

    @@map("candidates")
    @@schema("app")
}

model PositionCandidate {
    id           String                  @id @default(uuid())
    position_id  String
    candidate_id String
    status       PositionCandidateStatus @default(NEW)
    created_at   Int
    updated_at   Int
    deleted_at   Int?
    created_by   String
    updated_by   String
    deleted_by   String?

    // Relations
    position       Position        @relation(fields: [position_id], references: [id])
    candidate      Candidate       @relation(fields: [candidate_id], references: [id])
    creator        User            @relation("PositionCandidateCreatedBy", fields: [created_by], references: [id])
    updater        User            @relation("PositionCandidateUpdatedBy", fields: [updated_by], references: [id])
    messageThreads MessageThread[] @relation("PositionCandidateThreads")

    @@unique([position_id, candidate_id])
    @@map("position_candidates")
    @@schema("app")
}

// Messaging system
model MessageThread {
    id                    String  @id @default(uuid())
    candidate_id          String
    position_candidate_id String?
    subject               String?
    created_at            Int
    updated_at            Int
    deleted_at            Int?
    created_by            String
    updated_by            String
    deleted_by            String?

    // Relations
    candidate         Candidate          @relation("CandidateThreads", fields: [candidate_id], references: [id])
    positionCandidate PositionCandidate? @relation("PositionCandidateThreads", fields: [position_candidate_id], references: [id])
    creator           User               @relation("MessageThreadCreatedBy", fields: [created_by], references: [id])
    updater           User               @relation("MessageThreadUpdatedBy", fields: [updated_by], references: [id])
    messages          Message[]          @relation("ThreadMessages")

    @@map("message_threads")
    @@schema("app")
}

model Message {
    id           String           @id @default(uuid())
    thread_id    String
    candidate_id String
    content      String
    metadata     Json?
    sender_type  SenderType       @default(HUMAN)
    direction    MessageDirection @default(OUTBOUND)
    status       MessageStatus    @default(PENDING)
    created_at   Int
    updated_at   Int
    deleted_at   Int?
    created_by   String
    updated_by   String
    deleted_by   String?

    // Relations
    thread    MessageThread @relation("ThreadMessages", fields: [thread_id], references: [id])
    candidate Candidate     @relation("CandidateMessages", fields: [candidate_id], references: [id])
    creator   User          @relation("MessageCreatedBy", fields: [created_by], references: [id])
    updater   User          @relation("MessageUpdatedBy", fields: [updated_by], references: [id])

    @@map("messages")
    @@schema("app")
}

enum PositionStatus {
    DRAFT
    OPEN
    FILLED
    CANCELLED

    @@schema("app")
}

enum CareerLevel {
    ENTRY
    MID
    SENIOR
    EXECUTIVE

    @@schema("app")
}

enum EducationLevel {
    HIGH_SCHOOL
    ASSOCIATE
    BACHELOR
    MASTER
    PHD

    @@schema("app")
}

enum CandidateStatus {
    ACTIVE
    INACTIVE
    HIRED
    REJECTED

    @@schema("app")
}

enum CandidateSource {
    ADVERTISING
    COLD_CALL
    EVENT
    GITHUB
    JOB_BOARD
    JOB_FAIR
    LINKEDIN
    OTHER
    REFERRAL
    SOCIAL_MEDIA
    UNKNOWN
    WEBSITE

    @@schema("app")
}

enum PositionCandidateStatus {
    NEW
    SCREENING
    INTERVIEWING
    OFFER_PENDING
    OFFER_ACCEPTED
    OFFER_DECLINED
    REJECTED
    WITHDRAWN

    @@schema("app")
}

enum SenderType {
    HUMAN
    AI
    SYSTEM

    @@schema("app")
}

enum MessageDirection {
    INBOUND
    OUTBOUND

    @@schema("app")
}

enum MessageStatus {
    PENDING
    SENT
    DELIVERED
    READ
    FAILED

    @@schema("app")
}
