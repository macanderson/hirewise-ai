generator py {
  provider             = "prisma-client-py"
  output               = "../../apps/api/src/db/client"
  recursive_type_depth = "5"
  interface            = "asyncio"
  previewFeatures      = ["multiSchema", "postgresqlExtensions"]
}



generator docs {
  provider = "prisma-docs-generator"
  output   = "./../../apps/docs/schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth", "app"]
}

model Assessment {
  id          String    @id
  candidateId String
  score       Float?
  feedback    String?
  skills      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@schema("app")
}

model Candidate {
  id          String          @id
  name        String
  email       String
  phone       String?
  resume      String?
  coverLetter String?
  status      CandidateStatus @default(NEW)
  jobId       String
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime
  Assessment  Assessment[]
  Job         Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  User        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Interview   Interview[]

  @@schema("app")
}

model Interview {
  id          String          @id
  candidateId String
  scheduledAt DateTime
  duration    Int
  type        InterviewType   @default(PHONE)
  notes       String?
  status      InterviewStatus @default(SCHEDULED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime
  Candidate   Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@schema("app")
}

model Job {
  id          String      @id
  title       String
  description String
  company     String
  location    String?
  salary      String?
  type        JobType     @default(FULL_TIME)
  status      JobStatus   @default(OPEN)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  Candidate   Candidate[]
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("app")
}

model Profile {
  id        String   @id
  userId    String
  title     String?
  company   String?
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model Token {
  id        String   @id
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model User {
  id        String      @id
  email     String      @unique
  password  String
  firstName String?
  lastName  String?
  role      Role        @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime
  Candidate Candidate[]
  Job       Job[]
  Profile   Profile[]
  Token     Token[]

  @@schema("auth")
}

enum CandidateStatus {
  NEW
  REVIEWING
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED

  @@schema("app")
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED

  @@schema("app")
}

enum InterviewType {
  PHONE
  VIDEO
  IN_PERSON
  TECHNICAL

  @@schema("app")
}

enum JobStatus {
  OPEN
  CLOSED
  DRAFT
  ARCHIVED

  @@schema("app")
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE

  @@schema("app")
}

enum Role {
  USER
  ADMIN
  RECRUITER
  HIRING_MANAGER

  @@schema("app")
}
