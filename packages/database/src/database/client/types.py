# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _LicenseTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.LicenseType']]


class _LicenseTypeListFilterHasInput(TypedDict):
    has: 'enums.LicenseType'


class _LicenseTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.LicenseType']


class _LicenseTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.LicenseType']


class _LicenseTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


LicenseTypeListFilter = Union[
    _LicenseTypeListFilterHasInput,
    _LicenseTypeListFilterEqualsInput,
    _LicenseTypeListFilterHasSomeInput,
    _LicenseTypeListFilterIsEmptyInput,
    _LicenseTypeListFilterHasEveryInput,
]


class _LicenseTypeListUpdateSet(TypedDict):
    set: List['enums.LicenseType']


class _LicenseTypeListUpdatePush(TypedDict):
    push: List['enums.LicenseType']


LicenseTypeListUpdate = Union[
    List['enums.LicenseType'],
    _LicenseTypeListUpdateSet,
    _LicenseTypeListUpdatePush,
]

class _UserRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserRole']]


class _UserRoleListFilterHasInput(TypedDict):
    has: 'enums.UserRole'


class _UserRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserRole']


class _UserRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserRole']


class _UserRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserRoleListFilter = Union[
    _UserRoleListFilterHasInput,
    _UserRoleListFilterEqualsInput,
    _UserRoleListFilterHasSomeInput,
    _UserRoleListFilterIsEmptyInput,
    _UserRoleListFilterHasEveryInput,
]


class _UserRoleListUpdateSet(TypedDict):
    set: List['enums.UserRole']


class _UserRoleListUpdatePush(TypedDict):
    push: List['enums.UserRole']


UserRoleListUpdate = Union[
    List['enums.UserRole'],
    _UserRoleListUpdateSet,
    _UserRoleListUpdatePush,
]

class _AuthTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.AuthType']]


class _AuthTypeListFilterHasInput(TypedDict):
    has: 'enums.AuthType'


class _AuthTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.AuthType']


class _AuthTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.AuthType']


class _AuthTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


AuthTypeListFilter = Union[
    _AuthTypeListFilterHasInput,
    _AuthTypeListFilterEqualsInput,
    _AuthTypeListFilterHasSomeInput,
    _AuthTypeListFilterIsEmptyInput,
    _AuthTypeListFilterHasEveryInput,
]


class _AuthTypeListUpdateSet(TypedDict):
    set: List['enums.AuthType']


class _AuthTypeListUpdatePush(TypedDict):
    push: List['enums.AuthType']


AuthTypeListUpdate = Union[
    List['enums.AuthType'],
    _AuthTypeListUpdateSet,
    _AuthTypeListUpdatePush,
]


# Tenant types

class TenantOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Tenant create method"""
    id: _str
    license_type: 'enums.LicenseType'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    users: 'UserCreateManyNestedWithoutRelationsInput'


class TenantCreateInput(TenantOptionalCreateInput):
    """Required arguments to the Tenant create method"""
    name: _str
    slug: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TenantOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Tenant create method, without relations"""
    id: _str
    license_type: 'enums.LicenseType'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]


class TenantCreateWithoutRelationsInput(TenantOptionalCreateWithoutRelationsInput):
    """Required arguments to the Tenant create method, without relations"""
    name: _str
    slug: _str

class TenantConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TenantCreateWithoutRelationsInput'
    where: 'TenantWhereUniqueInput'

class TenantCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TenantCreateWithoutRelationsInput'
    connect: 'TenantWhereUniqueInput'
    connect_or_create: 'TenantConnectOrCreateWithoutRelationsInput'


class TenantCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TenantCreateWithoutRelationsInput', List['TenantCreateWithoutRelationsInput']]
    connect: Union['TenantWhereUniqueInput', List['TenantWhereUniqueInput']]
    connect_or_create: Union['TenantConnectOrCreateWithoutRelationsInput', List['TenantConnectOrCreateWithoutRelationsInput']]

_TenantWhereUnique_id_Input = TypedDict(
    '_TenantWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_TenantWhereUnique_slug_Input = TypedDict(
    '_TenantWhereUnique_slug_Input',
    {
        'slug': '_str',
    },
    total=True
)

TenantWhereUniqueInput = Union[
    '_TenantWhereUnique_id_Input',
    '_TenantWhereUnique_slug_Input',
]


class TenantUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    slug: _str
    license_type: 'enums.LicenseType'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    users: 'UserUpdateManyWithoutRelationsInput'


class TenantUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    slug: _str
    license_type: 'enums.LicenseType'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]


class TenantUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TenantCreateWithoutRelationsInput']
    connect: List['TenantWhereUniqueInput']
    connect_or_create: List['TenantConnectOrCreateWithoutRelationsInput']
    set: List['TenantWhereUniqueInput']
    disconnect: List['TenantWhereUniqueInput']
    delete: List['TenantWhereUniqueInput']

    # TODO
    # update: List['TenantUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TenantUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TenantScalarWhereInput']
    # upsert: List['TenantUpserteWithWhereUniqueWithoutRelationsInput']


class TenantUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TenantCreateWithoutRelationsInput'
    connect: 'TenantWhereUniqueInput'
    connect_or_create: 'TenantConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TenantUpdateInput'
    # upsert: 'TenantUpsertWithoutRelationsInput'


class TenantUpsertInput(TypedDict):
    create: 'TenantCreateInput'
    update: 'TenantUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Tenant_id_OrderByInput = TypedDict(
    '_Tenant_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Tenant_name_OrderByInput = TypedDict(
    '_Tenant_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Tenant_slug_OrderByInput = TypedDict(
    '_Tenant_slug_OrderByInput',
    {
        'slug': 'SortOrder',
    },
    total=True
)

_Tenant_license_type_OrderByInput = TypedDict(
    '_Tenant_license_type_OrderByInput',
    {
        'license_type': 'SortOrder',
    },
    total=True
)

_Tenant_created_at_OrderByInput = TypedDict(
    '_Tenant_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Tenant_updated_at_OrderByInput = TypedDict(
    '_Tenant_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Tenant_deleted_at_OrderByInput = TypedDict(
    '_Tenant_deleted_at_OrderByInput',
    {
        'deleted_at': 'SortOrder',
    },
    total=True
)

_Tenant_RelevanceInner = TypedDict(
    '_Tenant_RelevanceInner',
    {
        'fields': 'List[TenantScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Tenant_RelevanceOrderByInput = TypedDict(
    '_Tenant_RelevanceOrderByInput',
    {
        '_relevance': '_Tenant_RelevanceInner',
    },
    total=True
)

TenantOrderByInput = Union[
    '_Tenant_id_OrderByInput',
    '_Tenant_name_OrderByInput',
    '_Tenant_slug_OrderByInput',
    '_Tenant_license_type_OrderByInput',
    '_Tenant_created_at_OrderByInput',
    '_Tenant_updated_at_OrderByInput',
    '_Tenant_deleted_at_OrderByInput',
    '_Tenant_RelevanceOrderByInput',
]



# recursive Tenant types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TenantRelationFilter = TypedDict(
    'TenantRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TenantListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TenantInclude(TypedDict, total=False):
    """Tenant relational arguments"""
    users: Union[bool, 'FindManyUserArgsFromTenant']


    

class TenantIncludeFromTenant(TypedDict, total=False):
    """Relational arguments for Tenant"""
    users: Union[bool, 'FindManyUserArgsFromTenantRecursive1']


class TenantIncludeFromTenantRecursive1(TypedDict, total=False):
    """Relational arguments for Tenant"""
    users: Union[bool, 'FindManyUserArgsFromTenantRecursive2']


class TenantIncludeFromTenantRecursive2(TypedDict, total=False):
    """Relational arguments for Tenant"""
    users: Union[bool, 'FindManyUserArgsFromTenantRecursive3']


class TenantIncludeFromTenantRecursive3(TypedDict, total=False):
    """Relational arguments for Tenant"""
    users: Union[bool, 'FindManyUserArgsFromTenantRecursive4']


class TenantIncludeFromTenantRecursive4(TypedDict, total=False):
    """Relational arguments for Tenant"""

    

class TenantArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'TenantIncludeFromTenantRecursive1'


class TenantArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'TenantIncludeFromTenantRecursive2'


class TenantArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'TenantIncludeFromTenantRecursive3'


class TenantArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'TenantIncludeFromTenantRecursive4'


class TenantArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    
    

class FindManyTenantArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive1'


class FindManyTenantArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive2'


class FindManyTenantArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive3'


class FindManyTenantArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive4'


class FindManyTenantArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    
    

class UserIncludeFromTenant(TypedDict, total=False):
    """Relational arguments for Tenant"""
    tenant: Union[bool, 'TenantArgsFromTenantRecursive1']
    profiles: Union[bool, 'FindManyProfileArgsFromTenantRecursive1']


class UserIncludeFromTenantRecursive1(TypedDict, total=False):
    """Relational arguments for Tenant"""
    tenant: Union[bool, 'TenantArgsFromTenantRecursive2']
    profiles: Union[bool, 'FindManyProfileArgsFromTenantRecursive2']


class UserIncludeFromTenantRecursive2(TypedDict, total=False):
    """Relational arguments for Tenant"""
    tenant: Union[bool, 'TenantArgsFromTenantRecursive3']
    profiles: Union[bool, 'FindManyProfileArgsFromTenantRecursive3']


class UserIncludeFromTenantRecursive3(TypedDict, total=False):
    """Relational arguments for Tenant"""
    tenant: Union[bool, 'TenantArgsFromTenantRecursive4']
    profiles: Union[bool, 'FindManyProfileArgsFromTenantRecursive4']


class UserIncludeFromTenantRecursive4(TypedDict, total=False):
    """Relational arguments for Tenant"""

    

class UserArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    
    

class FindManyUserArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProfileIncludeFromTenant(TypedDict, total=False):
    """Relational arguments for Tenant"""
    User: Union[bool, 'UserArgsFromTenantRecursive1']


class ProfileIncludeFromTenantRecursive1(TypedDict, total=False):
    """Relational arguments for Tenant"""
    User: Union[bool, 'UserArgsFromTenantRecursive2']


class ProfileIncludeFromTenantRecursive2(TypedDict, total=False):
    """Relational arguments for Tenant"""
    User: Union[bool, 'UserArgsFromTenantRecursive3']


class ProfileIncludeFromTenantRecursive3(TypedDict, total=False):
    """Relational arguments for Tenant"""
    User: Union[bool, 'UserArgsFromTenantRecursive4']


class ProfileIncludeFromTenantRecursive4(TypedDict, total=False):
    """Relational arguments for Tenant"""

    

class ProfileArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    
    

class FindManyProfileArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    


FindManyTenantArgs = FindManyTenantArgsFromTenant
FindFirstTenantArgs = FindManyTenantArgsFromTenant


    

class TenantWhereInput(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[_str, 'types.StringFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    users: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['TenantWhereInputRecursive1', List['TenantWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TenantWhereInputRecursive1']
    OR: List['TenantWhereInputRecursive1']
    NOT: List['TenantWhereInputRecursive1']


class TenantWhereInputRecursive1(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[_str, 'types.StringFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    users: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['TenantWhereInputRecursive2', List['TenantWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TenantWhereInputRecursive2']
    OR: List['TenantWhereInputRecursive2']
    NOT: List['TenantWhereInputRecursive2']


class TenantWhereInputRecursive2(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[_str, 'types.StringFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    users: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['TenantWhereInputRecursive3', List['TenantWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TenantWhereInputRecursive3']
    OR: List['TenantWhereInputRecursive3']
    NOT: List['TenantWhereInputRecursive3']


class TenantWhereInputRecursive3(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[_str, 'types.StringFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    users: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['TenantWhereInputRecursive4', List['TenantWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TenantWhereInputRecursive4']
    OR: List['TenantWhereInputRecursive4']
    NOT: List['TenantWhereInputRecursive4']


class TenantWhereInputRecursive4(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    slug: Union[_str, 'types.StringFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    users: 'UserListRelationFilter'



# aggregate Tenant types


    

class TenantScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TenantScalarWhereWithAggregatesInputRecursive1']
    OR: List['TenantScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TenantScalarWhereWithAggregatesInputRecursive1']


class TenantScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TenantScalarWhereWithAggregatesInputRecursive2']
    OR: List['TenantScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TenantScalarWhereWithAggregatesInputRecursive2']


class TenantScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TenantScalarWhereWithAggregatesInputRecursive3']
    OR: List['TenantScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TenantScalarWhereWithAggregatesInputRecursive3']


class TenantScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TenantScalarWhereWithAggregatesInputRecursive4']
    OR: List['TenantScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TenantScalarWhereWithAggregatesInputRecursive4']


class TenantScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    slug: Union[_str, 'types.StringWithAggregatesFilter']
    license_type: 'enums.LicenseType'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class TenantGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    slug: _str
    license_type: 'enums.LicenseType'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: datetime.datetime
    _sum: 'TenantSumAggregateOutput'
    _avg: 'TenantAvgAggregateOutput'
    _min: 'TenantMinAggregateOutput'
    _max: 'TenantMaxAggregateOutput'
    _count: 'TenantCountAggregateOutput'


class TenantAvgAggregateOutput(TypedDict, total=False):
    """Tenant output for aggregating averages"""


class TenantSumAggregateOutput(TypedDict, total=False):
    """Tenant output for aggregating sums"""


class TenantScalarAggregateOutput(TypedDict, total=False):
    """Tenant output including scalar fields"""
    id: _str
    name: _str
    slug: _str
    license_type: 'enums.LicenseType'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: datetime.datetime


TenantMinAggregateOutput = TenantScalarAggregateOutput
TenantMaxAggregateOutput = TenantScalarAggregateOutput


class TenantMaxAggregateInput(TypedDict, total=False):
    """Tenant input for aggregating by max"""
    id: bool
    name: bool
    slug: bool
    license_type: bool
    created_at: bool
    updated_at: bool
    deleted_at: bool


class TenantMinAggregateInput(TypedDict, total=False):
    """Tenant input for aggregating by min"""
    id: bool
    name: bool
    slug: bool
    license_type: bool
    created_at: bool
    updated_at: bool
    deleted_at: bool


class TenantNumberAggregateInput(TypedDict, total=False):
    """Tenant input for aggregating numbers"""


TenantAvgAggregateInput = TenantNumberAggregateInput
TenantSumAggregateInput = TenantNumberAggregateInput


TenantCountAggregateInput = TypedDict(
    'TenantCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'slug': bool,
        'license_type': bool,
        'created_at': bool,
        'updated_at': bool,
        'deleted_at': bool,
        '_all': bool,
    },
    total=False,
)

TenantCountAggregateOutput = TypedDict(
    'TenantCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'slug': int,
        'license_type': int,
        'created_at': int,
        'updated_at': int,
        'deleted_at': int,
        '_all': int,
    },
    total=False,
)


TenantKeys = Literal[
    'id',
    'name',
    'slug',
    'license_type',
    'created_at',
    'updated_at',
    'deleted_at',
    'users',
]
TenantScalarFieldKeys = Literal[
    'id',
    'name',
    'slug',
    'license_type',
    'created_at',
    'updated_at',
    'deleted_at',
]
TenantScalarFieldKeysT = TypeVar('TenantScalarFieldKeysT', bound=TenantScalarFieldKeys)

TenantRelationalFieldKeys = Literal[
        'users',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    first_name: Optional[_str]
    last_name: Optional[_str]
    avatar_url: Optional[_str]
    role: 'enums.UserRole'
    tenant_id: _str
    tenant: 'TenantCreateNestedWithoutRelationsInput'
    profiles: 'ProfileCreateManyNestedWithoutRelationsInput'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    created_by: Optional[_str]
    updated_by: Optional[_str]
    deleted_by: Optional[_str]


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    auth_id: _str
    email: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    first_name: Optional[_str]
    last_name: Optional[_str]
    avatar_url: Optional[_str]
    role: 'enums.UserRole'
    tenant_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    created_by: Optional[_str]
    updated_by: Optional[_str]
    deleted_by: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    auth_id: _str
    email: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_auth_id_Input = TypedDict(
    '_UserWhereUnique_auth_id_Input',
    {
        'auth_id': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_auth_id_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    auth_id: _str
    email: _str
    first_name: Optional[_str]
    last_name: Optional[_str]
    avatar_url: Optional[_str]
    role: 'enums.UserRole'
    tenant: 'TenantUpdateOneWithoutRelationsInput'
    profiles: 'ProfileUpdateManyWithoutRelationsInput'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    created_by: Optional[_str]
    updated_by: Optional[_str]
    deleted_by: Optional[_str]


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    auth_id: _str
    email: _str
    first_name: Optional[_str]
    last_name: Optional[_str]
    avatar_url: Optional[_str]
    role: 'enums.UserRole'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    created_by: Optional[_str]
    updated_by: Optional[_str]
    deleted_by: Optional[_str]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_auth_id_OrderByInput = TypedDict(
    '_User_auth_id_OrderByInput',
    {
        'auth_id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_first_name_OrderByInput = TypedDict(
    '_User_first_name_OrderByInput',
    {
        'first_name': 'SortOrder',
    },
    total=True
)

_User_last_name_OrderByInput = TypedDict(
    '_User_last_name_OrderByInput',
    {
        'last_name': 'SortOrder',
    },
    total=True
)

_User_avatar_url_OrderByInput = TypedDict(
    '_User_avatar_url_OrderByInput',
    {
        'avatar_url': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_tenant_id_OrderByInput = TypedDict(
    '_User_tenant_id_OrderByInput',
    {
        'tenant_id': 'SortOrder',
    },
    total=True
)

_User_created_at_OrderByInput = TypedDict(
    '_User_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_User_updated_at_OrderByInput = TypedDict(
    '_User_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_User_deleted_at_OrderByInput = TypedDict(
    '_User_deleted_at_OrderByInput',
    {
        'deleted_at': 'SortOrder',
    },
    total=True
)

_User_created_by_OrderByInput = TypedDict(
    '_User_created_by_OrderByInput',
    {
        'created_by': 'SortOrder',
    },
    total=True
)

_User_updated_by_OrderByInput = TypedDict(
    '_User_updated_by_OrderByInput',
    {
        'updated_by': 'SortOrder',
    },
    total=True
)

_User_deleted_by_OrderByInput = TypedDict(
    '_User_deleted_by_OrderByInput',
    {
        'deleted_by': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_auth_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_first_name_OrderByInput',
    '_User_last_name_OrderByInput',
    '_User_avatar_url_OrderByInput',
    '_User_role_OrderByInput',
    '_User_tenant_id_OrderByInput',
    '_User_created_at_OrderByInput',
    '_User_updated_at_OrderByInput',
    '_User_deleted_at_OrderByInput',
    '_User_created_by_OrderByInput',
    '_User_updated_by_OrderByInput',
    '_User_deleted_by_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    tenant: Union[bool, 'TenantArgsFromUser']
    profiles: Union[bool, 'FindManyProfileArgsFromUser']


    

class TenantIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserArgsFromUserRecursive1']


class TenantIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserArgsFromUserRecursive2']


class TenantIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserArgsFromUserRecursive3']


class TenantIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserArgsFromUserRecursive4']


class TenantIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TenantArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TenantIncludeFromTenantRecursive1'


class TenantArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TenantIncludeFromTenantRecursive2'


class TenantArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TenantIncludeFromTenantRecursive3'


class TenantArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TenantIncludeFromTenantRecursive4'


class TenantArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTenantArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive1'


class FindManyTenantArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive2'


class FindManyTenantArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive3'


class FindManyTenantArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive4'


class FindManyTenantArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    tenant: Union[bool, 'TenantArgsFromUserRecursive1']
    profiles: Union[bool, 'FindManyProfileArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    tenant: Union[bool, 'TenantArgsFromUserRecursive2']
    profiles: Union[bool, 'FindManyProfileArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    tenant: Union[bool, 'TenantArgsFromUserRecursive3']
    profiles: Union[bool, 'FindManyProfileArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    tenant: Union[bool, 'TenantArgsFromUserRecursive4']
    profiles: Union[bool, 'FindManyProfileArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProfileIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']


class ProfileIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']


class ProfileIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']


class ProfileIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']


class ProfileIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    auth_id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    avatar_url: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    profiles: 'ProfileListRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    updated_by: Union[None, _str, 'types.StringFilter']
    deleted_by: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    auth_id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    avatar_url: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    profiles: 'ProfileListRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    updated_by: Union[None, _str, 'types.StringFilter']
    deleted_by: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    auth_id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    avatar_url: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    profiles: 'ProfileListRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    updated_by: Union[None, _str, 'types.StringFilter']
    deleted_by: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    auth_id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    avatar_url: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    profiles: 'ProfileListRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    updated_by: Union[None, _str, 'types.StringFilter']
    deleted_by: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    auth_id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    avatar_url: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    profiles: 'ProfileListRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    deleted_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    updated_by: Union[None, _str, 'types.StringFilter']
    deleted_by: Union[None, _str, 'types.StringFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    avatar_url: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    updated_by: Union[_str, 'types.StringWithAggregatesFilter']
    deleted_by: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    avatar_url: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    updated_by: Union[_str, 'types.StringWithAggregatesFilter']
    deleted_by: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    avatar_url: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    updated_by: Union[_str, 'types.StringWithAggregatesFilter']
    deleted_by: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    avatar_url: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    updated_by: Union[_str, 'types.StringWithAggregatesFilter']
    deleted_by: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    avatar_url: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    tenant_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deleted_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    updated_by: Union[_str, 'types.StringWithAggregatesFilter']
    deleted_by: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    auth_id: _str
    email: _str
    first_name: _str
    last_name: _str
    avatar_url: _str
    role: 'enums.UserRole'
    tenant_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: datetime.datetime
    created_by: _str
    updated_by: _str
    deleted_by: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    auth_id: _str
    email: _str
    first_name: _str
    last_name: _str
    avatar_url: _str
    role: 'enums.UserRole'
    tenant_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: datetime.datetime
    created_by: _str
    updated_by: _str
    deleted_by: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    auth_id: bool
    email: bool
    first_name: bool
    last_name: bool
    avatar_url: bool
    role: bool
    tenant_id: bool
    created_at: bool
    updated_at: bool
    deleted_at: bool
    created_by: bool
    updated_by: bool
    deleted_by: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    auth_id: bool
    email: bool
    first_name: bool
    last_name: bool
    avatar_url: bool
    role: bool
    tenant_id: bool
    created_at: bool
    updated_at: bool
    deleted_at: bool
    created_by: bool
    updated_by: bool
    deleted_by: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'auth_id': bool,
        'email': bool,
        'first_name': bool,
        'last_name': bool,
        'avatar_url': bool,
        'role': bool,
        'tenant_id': bool,
        'created_at': bool,
        'updated_at': bool,
        'deleted_at': bool,
        'created_by': bool,
        'updated_by': bool,
        'deleted_by': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'auth_id': int,
        'email': int,
        'first_name': int,
        'last_name': int,
        'avatar_url': int,
        'role': int,
        'tenant_id': int,
        'created_at': int,
        'updated_at': int,
        'deleted_at': int,
        'created_by': int,
        'updated_by': int,
        'deleted_by': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'auth_id',
    'email',
    'first_name',
    'last_name',
    'avatar_url',
    'role',
    'tenant_id',
    'tenant',
    'profiles',
    'created_at',
    'updated_at',
    'deleted_at',
    'created_by',
    'updated_by',
    'deleted_by',
]
UserScalarFieldKeys = Literal[
    'id',
    'auth_id',
    'email',
    'first_name',
    'last_name',
    'avatar_url',
    'role',
    'tenant_id',
    'created_at',
    'updated_at',
    'deleted_at',
    'created_by',
    'updated_by',
    'deleted_by',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'tenant',
        'profiles',
    ]

# Profile types

class ProfileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Profile create method"""
    id: _str
    social_id: Optional[_str]
    auth_type: Optional['enums.AuthType']
    user_id: _str
    User: 'UserCreateNestedWithoutRelationsInput'


class ProfileCreateInput(ProfileOptionalCreateInput):
    """Required arguments to the Profile create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProfileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Profile create method, without relations"""
    id: _str
    social_id: Optional[_str]
    auth_type: Optional['enums.AuthType']
    user_id: _str


class ProfileCreateWithoutRelationsInput(ProfileOptionalCreateWithoutRelationsInput):
    """Required arguments to the Profile create method, without relations"""

class ProfileConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProfileCreateWithoutRelationsInput'
    where: 'ProfileWhereUniqueInput'

class ProfileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    connect_or_create: 'ProfileConnectOrCreateWithoutRelationsInput'


class ProfileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProfileCreateWithoutRelationsInput', List['ProfileCreateWithoutRelationsInput']]
    connect: Union['ProfileWhereUniqueInput', List['ProfileWhereUniqueInput']]
    connect_or_create: Union['ProfileConnectOrCreateWithoutRelationsInput', List['ProfileConnectOrCreateWithoutRelationsInput']]

_ProfileWhereUnique_id_Input = TypedDict(
    '_ProfileWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ProfileWhereUnique_user_id_Input = TypedDict(
    '_ProfileWhereUnique_user_id_Input',
    {
        'user_id': '_str',
    },
    total=True
)

ProfileWhereUniqueInput = Union[
    '_ProfileWhereUnique_id_Input',
    '_ProfileWhereUnique_user_id_Input',
]


class ProfileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    social_id: Optional[_str]
    auth_type: Optional['enums.AuthType']
    User: 'UserUpdateOneWithoutRelationsInput'


class ProfileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    social_id: Optional[_str]
    auth_type: Optional['enums.AuthType']


class ProfileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProfileCreateWithoutRelationsInput']
    connect: List['ProfileWhereUniqueInput']
    connect_or_create: List['ProfileConnectOrCreateWithoutRelationsInput']
    set: List['ProfileWhereUniqueInput']
    disconnect: List['ProfileWhereUniqueInput']
    delete: List['ProfileWhereUniqueInput']

    # TODO
    # update: List['ProfileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProfileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProfileScalarWhereInput']
    # upsert: List['ProfileUpserteWithWhereUniqueWithoutRelationsInput']


class ProfileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    connect_or_create: 'ProfileConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProfileUpdateInput'
    # upsert: 'ProfileUpsertWithoutRelationsInput'


class ProfileUpsertInput(TypedDict):
    create: 'ProfileCreateInput'
    update: 'ProfileUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Profile_id_OrderByInput = TypedDict(
    '_Profile_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Profile_social_id_OrderByInput = TypedDict(
    '_Profile_social_id_OrderByInput',
    {
        'social_id': 'SortOrder',
    },
    total=True
)

_Profile_auth_type_OrderByInput = TypedDict(
    '_Profile_auth_type_OrderByInput',
    {
        'auth_type': 'SortOrder',
    },
    total=True
)

_Profile_user_id_OrderByInput = TypedDict(
    '_Profile_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Profile_RelevanceInner = TypedDict(
    '_Profile_RelevanceInner',
    {
        'fields': 'List[ProfileScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Profile_RelevanceOrderByInput = TypedDict(
    '_Profile_RelevanceOrderByInput',
    {
        '_relevance': '_Profile_RelevanceInner',
    },
    total=True
)

ProfileOrderByInput = Union[
    '_Profile_id_OrderByInput',
    '_Profile_social_id_OrderByInput',
    '_Profile_auth_type_OrderByInput',
    '_Profile_user_id_OrderByInput',
    '_Profile_RelevanceOrderByInput',
]



# recursive Profile types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProfileRelationFilter = TypedDict(
    'ProfileRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProfileListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProfileInclude(TypedDict, total=False):
    """Profile relational arguments"""
    User: Union[bool, 'UserArgsFromProfile']


    

class TenantIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    users: Union[bool, 'FindManyUserArgsFromProfileRecursive1']


class TenantIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    users: Union[bool, 'FindManyUserArgsFromProfileRecursive2']


class TenantIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    users: Union[bool, 'FindManyUserArgsFromProfileRecursive3']


class TenantIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    users: Union[bool, 'FindManyUserArgsFromProfileRecursive4']


class TenantIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class TenantArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TenantIncludeFromTenantRecursive1'


class TenantArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TenantIncludeFromTenantRecursive2'


class TenantArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TenantIncludeFromTenantRecursive3'


class TenantArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'TenantIncludeFromTenantRecursive4'


class TenantArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyTenantArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive1'


class FindManyTenantArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive2'


class FindManyTenantArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive3'


class FindManyTenantArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive4'


class FindManyTenantArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    
    

class UserIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    tenant: Union[bool, 'TenantArgsFromProfileRecursive1']
    profiles: Union[bool, 'FindManyProfileArgsFromProfileRecursive1']


class UserIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    tenant: Union[bool, 'TenantArgsFromProfileRecursive2']
    profiles: Union[bool, 'FindManyProfileArgsFromProfileRecursive2']


class UserIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    tenant: Union[bool, 'TenantArgsFromProfileRecursive3']
    profiles: Union[bool, 'FindManyProfileArgsFromProfileRecursive3']


class UserIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    tenant: Union[bool, 'TenantArgsFromProfileRecursive4']
    profiles: Union[bool, 'FindManyProfileArgsFromProfileRecursive4']


class UserIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class UserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyUserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProfileIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive1']


class ProfileIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive2']


class ProfileIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive3']


class ProfileIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    User: Union[bool, 'UserArgsFromProfileRecursive4']


class ProfileIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    distinct: List['ProfileScalarFieldKeys']
    


FindManyProfileArgs = FindManyProfileArgsFromProfile
FindFirstProfileArgs = FindManyProfileArgsFromProfile


    

class ProfileWhereInput(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    social_id: Union[None, _str, 'types.StringFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive1', List['ProfileWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive1']
    OR: List['ProfileWhereInputRecursive1']
    NOT: List['ProfileWhereInputRecursive1']


class ProfileWhereInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    social_id: Union[None, _str, 'types.StringFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive2', List['ProfileWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive2']
    OR: List['ProfileWhereInputRecursive2']
    NOT: List['ProfileWhereInputRecursive2']


class ProfileWhereInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    social_id: Union[None, _str, 'types.StringFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive3', List['ProfileWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive3']
    OR: List['ProfileWhereInputRecursive3']
    NOT: List['ProfileWhereInputRecursive3']


class ProfileWhereInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    social_id: Union[None, _str, 'types.StringFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ProfileWhereInputRecursive4', List['ProfileWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProfileWhereInputRecursive4']
    OR: List['ProfileWhereInputRecursive4']
    NOT: List['ProfileWhereInputRecursive4']


class ProfileWhereInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    social_id: Union[None, _str, 'types.StringFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'



# aggregate Profile types


    

class ProfileScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    social_id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive1']


class ProfileScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    social_id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive2']


class ProfileScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    social_id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive3']


class ProfileScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    social_id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProfileScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProfileScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProfileScalarWhereWithAggregatesInputRecursive4']


class ProfileScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    social_id: Union[_str, 'types.StringWithAggregatesFilter']
    auth_type: 'enums.AuthType'
    user_id: Union[_str, 'types.StringWithAggregatesFilter']



class ProfileGroupByOutput(TypedDict, total=False):
    id: _str
    social_id: _str
    auth_type: 'enums.AuthType'
    user_id: _str
    _sum: 'ProfileSumAggregateOutput'
    _avg: 'ProfileAvgAggregateOutput'
    _min: 'ProfileMinAggregateOutput'
    _max: 'ProfileMaxAggregateOutput'
    _count: 'ProfileCountAggregateOutput'


class ProfileAvgAggregateOutput(TypedDict, total=False):
    """Profile output for aggregating averages"""


class ProfileSumAggregateOutput(TypedDict, total=False):
    """Profile output for aggregating sums"""


class ProfileScalarAggregateOutput(TypedDict, total=False):
    """Profile output including scalar fields"""
    id: _str
    social_id: _str
    auth_type: 'enums.AuthType'
    user_id: _str


ProfileMinAggregateOutput = ProfileScalarAggregateOutput
ProfileMaxAggregateOutput = ProfileScalarAggregateOutput


class ProfileMaxAggregateInput(TypedDict, total=False):
    """Profile input for aggregating by max"""
    id: bool
    social_id: bool
    auth_type: bool
    user_id: bool


class ProfileMinAggregateInput(TypedDict, total=False):
    """Profile input for aggregating by min"""
    id: bool
    social_id: bool
    auth_type: bool
    user_id: bool


class ProfileNumberAggregateInput(TypedDict, total=False):
    """Profile input for aggregating numbers"""


ProfileAvgAggregateInput = ProfileNumberAggregateInput
ProfileSumAggregateInput = ProfileNumberAggregateInput


ProfileCountAggregateInput = TypedDict(
    'ProfileCountAggregateInput',
    {
        'id': bool,
        'social_id': bool,
        'auth_type': bool,
        'user_id': bool,
        '_all': bool,
    },
    total=False,
)

ProfileCountAggregateOutput = TypedDict(
    'ProfileCountAggregateOutput',
    {
        'id': int,
        'social_id': int,
        'auth_type': int,
        'user_id': int,
        '_all': int,
    },
    total=False,
)


ProfileKeys = Literal[
    'id',
    'social_id',
    'auth_type',
    'user_id',
    'User',
]
ProfileScalarFieldKeys = Literal[
    'id',
    'social_id',
    'auth_type',
    'user_id',
]
ProfileScalarFieldKeysT = TypeVar('ProfileScalarFieldKeysT', bound=ProfileScalarFieldKeys)

ProfileRelationalFieldKeys = Literal[
        'User',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields